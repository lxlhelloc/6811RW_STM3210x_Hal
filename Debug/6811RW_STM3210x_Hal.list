
6811RW_STM3210x_Hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003234  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  08003418  08003418  00013418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003720  08003720  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003720  08003720  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003720  08003720  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003720  08003720  00013720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003724  08003724  00013724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003728  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  20000074  0800379c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  0800379c  0002056c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a7c0  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ef1  00000000  00000000  0002a85d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  0002c750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000730  00000000  00000000  0002cf78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a30f  00000000  00000000  0002d6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000971b  00000000  00000000  000479b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091ef1  00000000  00000000  000510d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e2fc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000252c  00000000  00000000  000e3018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000074 	.word	0x20000074
 8000200:	00000000 	.word	0x00000000
 8000204:	08003400 	.word	0x08003400

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000078 	.word	0x20000078
 8000220:	08003400 	.word	0x08003400

08000224 <BMS_GetBatteryTotalVol>:


bms_t bms;

uint8_t BMS_GetBatteryTotalVol(uint32_t *vol)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b088      	sub	sp, #32
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	uint8_t read6811successflag = 0;
 800022c:	2300      	movs	r3, #0
 800022e:	77fb      	strb	r3, [r7, #31]
	uint8_t i;
	uint16_t _totalvol[CHIP_COUNT] = {0};
 8000230:	f107 0308 	add.w	r3, r7, #8
 8000234:	2200      	movs	r2, #0
 8000236:	601a      	str	r2, [r3, #0]
 8000238:	605a      	str	r2, [r3, #4]
 800023a:	609a      	str	r2, [r3, #8]
 800023c:	60da      	str	r2, [r3, #12]
	uint32_t volsum = 0;
 800023e:	2300      	movs	r3, #0
 8000240:	61bb      	str	r3, [r7, #24]
	for(i = 0;i < CHIP_COUNT;++i)
 8000242:	2300      	movs	r3, #0
 8000244:	77bb      	strb	r3, [r7, #30]
 8000246:	e020      	b.n	800028a <BMS_GetBatteryTotalVol+0x66>
	{
		LTC6811_ADD = ltc6811addr[i];
 8000248:	7fbb      	ldrb	r3, [r7, #30]
 800024a:	4a15      	ldr	r2, [pc, #84]	; (80002a0 <BMS_GetBatteryTotalVol+0x7c>)
 800024c:	5cd2      	ldrb	r2, [r2, r3]
 800024e:	4b15      	ldr	r3, [pc, #84]	; (80002a4 <BMS_GetBatteryTotalVol+0x80>)
 8000250:	701a      	strb	r2, [r3, #0]
		if(LTC6811_get_total_voltage(&_totalvol[i]) == 1)
 8000252:	7fbb      	ldrb	r3, [r7, #30]
 8000254:	f107 0208 	add.w	r2, r7, #8
 8000258:	005b      	lsls	r3, r3, #1
 800025a:	4413      	add	r3, r2
 800025c:	4618      	mov	r0, r3
 800025e:	f000 f9e3 	bl	8000628 <LTC6811_get_total_voltage>
 8000262:	4603      	mov	r3, r0
 8000264:	2b01      	cmp	r3, #1
 8000266:	d102      	bne.n	800026e <BMS_GetBatteryTotalVol+0x4a>
		{
			read6811successflag ++;
 8000268:	7ffb      	ldrb	r3, [r7, #31]
 800026a:	3301      	adds	r3, #1
 800026c:	77fb      	strb	r3, [r7, #31]
		}
		volsum += _totalvol[i]; 
 800026e:	7fbb      	ldrb	r3, [r7, #30]
 8000270:	005b      	lsls	r3, r3, #1
 8000272:	f107 0220 	add.w	r2, r7, #32
 8000276:	4413      	add	r3, r2
 8000278:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800027c:	461a      	mov	r2, r3
 800027e:	69bb      	ldr	r3, [r7, #24]
 8000280:	4413      	add	r3, r2
 8000282:	61bb      	str	r3, [r7, #24]
	for(i = 0;i < CHIP_COUNT;++i)
 8000284:	7fbb      	ldrb	r3, [r7, #30]
 8000286:	3301      	adds	r3, #1
 8000288:	77bb      	strb	r3, [r7, #30]
 800028a:	7fbb      	ldrb	r3, [r7, #30]
 800028c:	2b07      	cmp	r3, #7
 800028e:	d9db      	bls.n	8000248 <BMS_GetBatteryTotalVol+0x24>
	}
	*vol = volsum;
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	69ba      	ldr	r2, [r7, #24]
 8000294:	601a      	str	r2, [r3, #0]
	return read6811successflag;
 8000296:	7ffb      	ldrb	r3, [r7, #31]
}
 8000298:	4618      	mov	r0, r3
 800029a:	3720      	adds	r7, #32
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	08003448 	.word	0x08003448
 80002a4:	20000001 	.word	0x20000001

080002a8 <BMS_GetBatteryTotalVol_Filter>:

uint8_t BMS_GetBatteryTotalVol_Filter(uint32_t *vol)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b084      	sub	sp, #16
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;
	static uint32_t totalvol[5] = {0};
	uint32_t totalvolsum;
	uint8_t i;
	uint8_t flag;
	for(i = 4;i > 0;--i)
 80002b0:	2304      	movs	r3, #4
 80002b2:	72fb      	strb	r3, [r7, #11]
 80002b4:	e00b      	b.n	80002ce <BMS_GetBatteryTotalVol_Filter+0x26>
	{
		totalvol[i] = totalvol[i-1];
 80002b6:	7afb      	ldrb	r3, [r7, #11]
 80002b8:	1e5a      	subs	r2, r3, #1
 80002ba:	7afb      	ldrb	r3, [r7, #11]
 80002bc:	491e      	ldr	r1, [pc, #120]	; (8000338 <BMS_GetBatteryTotalVol_Filter+0x90>)
 80002be:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80002c2:	491d      	ldr	r1, [pc, #116]	; (8000338 <BMS_GetBatteryTotalVol_Filter+0x90>)
 80002c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(i = 4;i > 0;--i)
 80002c8:	7afb      	ldrb	r3, [r7, #11]
 80002ca:	3b01      	subs	r3, #1
 80002cc:	72fb      	strb	r3, [r7, #11]
 80002ce:	7afb      	ldrb	r3, [r7, #11]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d1f0      	bne.n	80002b6 <BMS_GetBatteryTotalVol_Filter+0xe>
	}
	flag = BMS_GetBatteryTotalVol(&totalvol[0]);
 80002d4:	4818      	ldr	r0, [pc, #96]	; (8000338 <BMS_GetBatteryTotalVol_Filter+0x90>)
 80002d6:	f7ff ffa5 	bl	8000224 <BMS_GetBatteryTotalVol>
 80002da:	4603      	mov	r3, r0
 80002dc:	72bb      	strb	r3, [r7, #10]
	cnt ++;
 80002de:	4b17      	ldr	r3, [pc, #92]	; (800033c <BMS_GetBatteryTotalVol_Filter+0x94>)
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	3301      	adds	r3, #1
 80002e4:	b2da      	uxtb	r2, r3
 80002e6:	4b15      	ldr	r3, [pc, #84]	; (800033c <BMS_GetBatteryTotalVol_Filter+0x94>)
 80002e8:	701a      	strb	r2, [r3, #0]
	totalvolsum = 0;
 80002ea:	2300      	movs	r3, #0
 80002ec:	60fb      	str	r3, [r7, #12]
	for(i = 0;i < 5;++i)
 80002ee:	2300      	movs	r3, #0
 80002f0:	72fb      	strb	r3, [r7, #11]
 80002f2:	e009      	b.n	8000308 <BMS_GetBatteryTotalVol_Filter+0x60>
		totalvolsum += totalvol[i];
 80002f4:	7afb      	ldrb	r3, [r7, #11]
 80002f6:	4a10      	ldr	r2, [pc, #64]	; (8000338 <BMS_GetBatteryTotalVol_Filter+0x90>)
 80002f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002fc:	68fa      	ldr	r2, [r7, #12]
 80002fe:	4413      	add	r3, r2
 8000300:	60fb      	str	r3, [r7, #12]
	for(i = 0;i < 5;++i)
 8000302:	7afb      	ldrb	r3, [r7, #11]
 8000304:	3301      	adds	r3, #1
 8000306:	72fb      	strb	r3, [r7, #11]
 8000308:	7afb      	ldrb	r3, [r7, #11]
 800030a:	2b04      	cmp	r3, #4
 800030c:	d9f2      	bls.n	80002f4 <BMS_GetBatteryTotalVol_Filter+0x4c>
	if(cnt > 5)
 800030e:	4b0b      	ldr	r3, [pc, #44]	; (800033c <BMS_GetBatteryTotalVol_Filter+0x94>)
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	2b05      	cmp	r3, #5
 8000314:	d902      	bls.n	800031c <BMS_GetBatteryTotalVol_Filter+0x74>
	{
		cnt = 5;
 8000316:	4b09      	ldr	r3, [pc, #36]	; (800033c <BMS_GetBatteryTotalVol_Filter+0x94>)
 8000318:	2205      	movs	r2, #5
 800031a:	701a      	strb	r2, [r3, #0]

	}
	*vol = totalvolsum / cnt;
 800031c:	4b07      	ldr	r3, [pc, #28]	; (800033c <BMS_GetBatteryTotalVol_Filter+0x94>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	461a      	mov	r2, r3
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	fbb3 f2f2 	udiv	r2, r3, r2
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	601a      	str	r2, [r3, #0]
	return flag;
 800032c:	7abb      	ldrb	r3, [r7, #10]
}
 800032e:	4618      	mov	r0, r3
 8000330:	3710      	adds	r7, #16
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000090 	.word	0x20000090
 800033c:	200000a4 	.word	0x200000a4

08000340 <BMS_GetBatteryCellVol>:

uint8_t BMS_GetBatteryCellVol(uint16_t *cellvol)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b0b4      	sub	sp, #208	; 0xd0
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
	uint16_t vol[96];//最多支持8片6811读取
	uint8_t i;

	for(i = 0;i < CHIP_COUNT;++i)
 8000348:	2300      	movs	r3, #0
 800034a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 800034e:	e01a      	b.n	8000386 <BMS_GetBatteryCellVol+0x46>
	{
		LTC6811_ADD = ltc6811addr[i];
 8000350:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8000354:	4a1f      	ldr	r2, [pc, #124]	; (80003d4 <BMS_GetBatteryCellVol+0x94>)
 8000356:	5cd2      	ldrb	r2, [r2, r3]
 8000358:	4b1f      	ldr	r3, [pc, #124]	; (80003d8 <BMS_GetBatteryCellVol+0x98>)
 800035a:	701a      	strb	r2, [r3, #0]
		LTC6811_Get_PerCell_Voltage(&vol[i*12]);
 800035c:	f897 20cf 	ldrb.w	r2, [r7, #207]	; 0xcf
 8000360:	4613      	mov	r3, r2
 8000362:	005b      	lsls	r3, r3, #1
 8000364:	4413      	add	r3, r2
 8000366:	009b      	lsls	r3, r3, #2
 8000368:	f107 020c 	add.w	r2, r7, #12
 800036c:	005b      	lsls	r3, r3, #1
 800036e:	4413      	add	r3, r2
 8000370:	4618      	mov	r0, r3
 8000372:	f000 f989 	bl	8000688 <LTC6811_Get_PerCell_Voltage>
		BMS_Delay(10);
 8000376:	200a      	movs	r0, #10
 8000378:	f000 ff46 	bl	8001208 <HAL_Delay>
	for(i = 0;i < CHIP_COUNT;++i)
 800037c:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8000380:	3301      	adds	r3, #1
 8000382:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 8000386:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800038a:	2b07      	cmp	r3, #7
 800038c:	d9e0      	bls.n	8000350 <BMS_GetBatteryCellVol+0x10>
	}
	for(i = 0;i < Batcellnum;++i)
 800038e:	2300      	movs	r3, #0
 8000390:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 8000394:	e014      	b.n	80003c0 <BMS_GetBatteryCellVol+0x80>
	{
		*cellvol = vol[BatCell_in6811_Index[i] - 1];
 8000396:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800039a:	4a10      	ldr	r2, [pc, #64]	; (80003dc <BMS_GetBatteryCellVol+0x9c>)
 800039c:	5cd3      	ldrb	r3, [r2, r3]
 800039e:	3b01      	subs	r3, #1
 80003a0:	005b      	lsls	r3, r3, #1
 80003a2:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80003a6:	4413      	add	r3, r2
 80003a8:	f833 2cc4 	ldrh.w	r2, [r3, #-196]
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	801a      	strh	r2, [r3, #0]
		cellvol++;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	3302      	adds	r3, #2
 80003b4:	607b      	str	r3, [r7, #4]
	for(i = 0;i < Batcellnum;++i)
 80003b6:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80003ba:	3301      	adds	r3, #1
 80003bc:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 80003c0:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80003c4:	2b59      	cmp	r3, #89	; 0x59
 80003c6:	d9e6      	bls.n	8000396 <BMS_GetBatteryCellVol+0x56>
	}
	return 0;
 80003c8:	2300      	movs	r3, #0
}
 80003ca:	4618      	mov	r0, r3
 80003cc:	37d0      	adds	r7, #208	; 0xd0
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	08003448 	.word	0x08003448
 80003d8:	20000001 	.word	0x20000001
 80003dc:	08003450 	.word	0x08003450

080003e0 <BMS_GetBatteryCellVol_Filter>:

uint8_t BMS_GetBatteryCellVol_Filter(uint16_t *cellvol)
{
 80003e0:	b590      	push	{r4, r7, lr}
 80003e2:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	6018      	str	r0, [r3, #0]
	static uint8_t cnt = 0,filter_Group = 1;
	static uint16_t CellVol[Batcellnum][5] ={0};
	uint8_t i,j;
	uint16_t Cell_Vol[Batcellnum] = {0};
 80003ec:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80003f0:	22b4      	movs	r2, #180	; 0xb4
 80003f2:	2100      	movs	r1, #0
 80003f4:	4618      	mov	r0, r3
 80003f6:	f002 fb39 	bl	8002a6c <memset>
	uint32_t Cell_Volsum[Batcellnum]={0};
 80003fa:	f107 0308 	add.w	r3, r7, #8
 80003fe:	4618      	mov	r0, r3
 8000400:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000404:	461a      	mov	r2, r3
 8000406:	2100      	movs	r1, #0
 8000408:	f002 fb30 	bl	8002a6c <memset>
	BMS_GetBatteryCellVol(Cell_Vol);
 800040c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8000410:	4618      	mov	r0, r3
 8000412:	f7ff ff95 	bl	8000340 <BMS_GetBatteryCellVol>
	for(i = 0;i < Batcellnum;++i)
 8000416:	2300      	movs	r3, #0
 8000418:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
 800041c:	e019      	b.n	8000452 <BMS_GetBatteryCellVol_Filter+0x72>
	{
		CellVol[i][cnt] = Cell_Vol[i];
 800041e:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8000422:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8000426:	4940      	ldr	r1, [pc, #256]	; (8000528 <BMS_GetBatteryCellVol_Filter+0x148>)
 8000428:	7809      	ldrb	r1, [r1, #0]
 800042a:	460c      	mov	r4, r1
 800042c:	005b      	lsls	r3, r3, #1
 800042e:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8000432:	440b      	add	r3, r1
 8000434:	f833 0cb8 	ldrh.w	r0, [r3, #-184]
 8000438:	493c      	ldr	r1, [pc, #240]	; (800052c <BMS_GetBatteryCellVol_Filter+0x14c>)
 800043a:	4613      	mov	r3, r2
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	4413      	add	r3, r2
 8000440:	4423      	add	r3, r4
 8000442:	4602      	mov	r2, r0
 8000444:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(i = 0;i < Batcellnum;++i)
 8000448:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 800044c:	3301      	adds	r3, #1
 800044e:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
 8000452:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8000456:	2b59      	cmp	r3, #89	; 0x59
 8000458:	d9e1      	bls.n	800041e <BMS_GetBatteryCellVol_Filter+0x3e>
	}
	cnt++;
 800045a:	4b33      	ldr	r3, [pc, #204]	; (8000528 <BMS_GetBatteryCellVol_Filter+0x148>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	3301      	adds	r3, #1
 8000460:	b2da      	uxtb	r2, r3
 8000462:	4b31      	ldr	r3, [pc, #196]	; (8000528 <BMS_GetBatteryCellVol_Filter+0x148>)
 8000464:	701a      	strb	r2, [r3, #0]
	if(filter_Group != 5)
 8000466:	4b32      	ldr	r3, [pc, #200]	; (8000530 <BMS_GetBatteryCellVol_Filter+0x150>)
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	2b05      	cmp	r3, #5
 800046c:	d003      	beq.n	8000476 <BMS_GetBatteryCellVol_Filter+0x96>
		filter_Group = cnt;
 800046e:	4b2e      	ldr	r3, [pc, #184]	; (8000528 <BMS_GetBatteryCellVol_Filter+0x148>)
 8000470:	781a      	ldrb	r2, [r3, #0]
 8000472:	4b2f      	ldr	r3, [pc, #188]	; (8000530 <BMS_GetBatteryCellVol_Filter+0x150>)
 8000474:	701a      	strb	r2, [r3, #0]
	cnt %= 5;
 8000476:	4b2c      	ldr	r3, [pc, #176]	; (8000528 <BMS_GetBatteryCellVol_Filter+0x148>)
 8000478:	781a      	ldrb	r2, [r3, #0]
 800047a:	4b2e      	ldr	r3, [pc, #184]	; (8000534 <BMS_GetBatteryCellVol_Filter+0x154>)
 800047c:	fba3 1302 	umull	r1, r3, r3, r2
 8000480:	0899      	lsrs	r1, r3, #2
 8000482:	460b      	mov	r3, r1
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	440b      	add	r3, r1
 8000488:	1ad3      	subs	r3, r2, r3
 800048a:	b2da      	uxtb	r2, r3
 800048c:	4b26      	ldr	r3, [pc, #152]	; (8000528 <BMS_GetBatteryCellVol_Filter+0x148>)
 800048e:	701a      	strb	r2, [r3, #0]

	for(i = 0;i < Batcellnum; ++i)
 8000490:	2300      	movs	r3, #0
 8000492:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
 8000496:	e03d      	b.n	8000514 <BMS_GetBatteryCellVol_Filter+0x134>
	{
		for(j = 0;j < filter_Group;++j)
 8000498:	2300      	movs	r3, #0
 800049a:	f887 3226 	strb.w	r3, [r7, #550]	; 0x226
 800049e:	e01c      	b.n	80004da <BMS_GetBatteryCellVol_Filter+0xfa>
		{
			Cell_Volsum[i] += CellVol[i][j]; 
 80004a0:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80004a4:	f107 0308 	add.w	r3, r7, #8
 80004a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80004ac:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80004b0:	f897 0226 	ldrb.w	r0, [r7, #550]	; 0x226
 80004b4:	4c1d      	ldr	r4, [pc, #116]	; (800052c <BMS_GetBatteryCellVol_Filter+0x14c>)
 80004b6:	4613      	mov	r3, r2
 80004b8:	009b      	lsls	r3, r3, #2
 80004ba:	4413      	add	r3, r2
 80004bc:	4403      	add	r3, r0
 80004be:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 80004c2:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80004c6:	4419      	add	r1, r3
 80004c8:	f107 0308 	add.w	r3, r7, #8
 80004cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(j = 0;j < filter_Group;++j)
 80004d0:	f897 3226 	ldrb.w	r3, [r7, #550]	; 0x226
 80004d4:	3301      	adds	r3, #1
 80004d6:	f887 3226 	strb.w	r3, [r7, #550]	; 0x226
 80004da:	4b15      	ldr	r3, [pc, #84]	; (8000530 <BMS_GetBatteryCellVol_Filter+0x150>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	f897 2226 	ldrb.w	r2, [r7, #550]	; 0x226
 80004e2:	429a      	cmp	r2, r3
 80004e4:	d3dc      	bcc.n	80004a0 <BMS_GetBatteryCellVol_Filter+0xc0>
		}
		cellvol[i] = Cell_Volsum[i]/filter_Group;
 80004e6:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80004ea:	f107 0308 	add.w	r3, r7, #8
 80004ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004f2:	4a0f      	ldr	r2, [pc, #60]	; (8000530 <BMS_GetBatteryCellVol_Filter+0x150>)
 80004f4:	7812      	ldrb	r2, [r2, #0]
 80004f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80004fa:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	1d3a      	adds	r2, r7, #4
 8000502:	6812      	ldr	r2, [r2, #0]
 8000504:	4413      	add	r3, r2
 8000506:	b28a      	uxth	r2, r1
 8000508:	801a      	strh	r2, [r3, #0]
	for(i = 0;i < Batcellnum; ++i)
 800050a:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 800050e:	3301      	adds	r3, #1
 8000510:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
 8000514:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8000518:	2b59      	cmp	r3, #89	; 0x59
 800051a:	d9bd      	bls.n	8000498 <BMS_GetBatteryCellVol_Filter+0xb8>

	}
	return 0;
 800051c:	2300      	movs	r3, #0
}
 800051e:	4618      	mov	r0, r3
 8000520:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8000524:	46bd      	mov	sp, r7
 8000526:	bd90      	pop	{r4, r7, pc}
 8000528:	200000a5 	.word	0x200000a5
 800052c:	200000a8 	.word	0x200000a8
 8000530:	20000000 	.word	0x20000000
 8000534:	cccccccd 	.word	0xcccccccd

08000538 <BMS_CheckCellStackStatus>:

uint8_t BMS_CheckCellStackStatus(uint16_t *CellStackVoltage,uint8_t num,uint8_t ischarge,uint16_t *max,uint16_t *min,uint8_t *bFlag,uint8_t *BalanceCellIndex)
{
 8000538:	b480      	push	{r7}
 800053a:	b089      	sub	sp, #36	; 0x24
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	460b      	mov	r3, r1
 8000544:	72fb      	strb	r3, [r7, #11]
 8000546:	4613      	mov	r3, r2
 8000548:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	unsigned int MaxVoltageCellIndex = 0,MinVoltageCellIndex = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	61bb      	str	r3, [r7, #24]
 800054e:	2300      	movs	r3, #0
 8000550:	617b      	str	r3, [r7, #20]
	for(i = 0;i < num-1;i++)
 8000552:	2300      	movs	r3, #0
 8000554:	77fb      	strb	r3, [r7, #31]
 8000556:	e022      	b.n	800059e <BMS_CheckCellStackStatus+0x66>
	{
		if(*(CellStackVoltage + MaxVoltageCellIndex) < *(CellStackVoltage + i+1))
 8000558:	69bb      	ldr	r3, [r7, #24]
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	68fa      	ldr	r2, [r7, #12]
 800055e:	4413      	add	r3, r2
 8000560:	881a      	ldrh	r2, [r3, #0]
 8000562:	7ffb      	ldrb	r3, [r7, #31]
 8000564:	3301      	adds	r3, #1
 8000566:	005b      	lsls	r3, r3, #1
 8000568:	68f9      	ldr	r1, [r7, #12]
 800056a:	440b      	add	r3, r1
 800056c:	881b      	ldrh	r3, [r3, #0]
 800056e:	429a      	cmp	r2, r3
 8000570:	d202      	bcs.n	8000578 <BMS_CheckCellStackStatus+0x40>
		{
			MaxVoltageCellIndex = i+1;
 8000572:	7ffb      	ldrb	r3, [r7, #31]
 8000574:	3301      	adds	r3, #1
 8000576:	61bb      	str	r3, [r7, #24]
		}
		if(*(CellStackVoltage + MinVoltageCellIndex) > *(CellStackVoltage + i+1))
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	005b      	lsls	r3, r3, #1
 800057c:	68fa      	ldr	r2, [r7, #12]
 800057e:	4413      	add	r3, r2
 8000580:	881a      	ldrh	r2, [r3, #0]
 8000582:	7ffb      	ldrb	r3, [r7, #31]
 8000584:	3301      	adds	r3, #1
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	68f9      	ldr	r1, [r7, #12]
 800058a:	440b      	add	r3, r1
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	429a      	cmp	r2, r3
 8000590:	d902      	bls.n	8000598 <BMS_CheckCellStackStatus+0x60>
		{
			MinVoltageCellIndex = i+1;
 8000592:	7ffb      	ldrb	r3, [r7, #31]
 8000594:	3301      	adds	r3, #1
 8000596:	617b      	str	r3, [r7, #20]
	for(i = 0;i < num-1;i++)
 8000598:	7ffb      	ldrb	r3, [r7, #31]
 800059a:	3301      	adds	r3, #1
 800059c:	77fb      	strb	r3, [r7, #31]
 800059e:	7ffa      	ldrb	r2, [r7, #31]
 80005a0:	7afb      	ldrb	r3, [r7, #11]
 80005a2:	3b01      	subs	r3, #1
 80005a4:	429a      	cmp	r2, r3
 80005a6:	dbd7      	blt.n	8000558 <BMS_CheckCellStackStatus+0x20>
		}
	}
    *max=CellStackVoltage[MaxVoltageCellIndex];
 80005a8:	69bb      	ldr	r3, [r7, #24]
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	68fa      	ldr	r2, [r7, #12]
 80005ae:	4413      	add	r3, r2
 80005b0:	881a      	ldrh	r2, [r3, #0]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	801a      	strh	r2, [r3, #0]
    *min=CellStackVoltage[MinVoltageCellIndex];
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	68fa      	ldr	r2, [r7, #12]
 80005bc:	4413      	add	r3, r2
 80005be:	881a      	ldrh	r2, [r3, #0]
 80005c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005c2:	801a      	strh	r2, [r3, #0]

    if(ischarge == CHARGING)
 80005c4:	7abb      	ldrb	r3, [r7, #10]
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d121      	bne.n	800060e <BMS_CheckCellStackStatus+0xd6>
    {
	    if(*(CellStackVoltage + MaxVoltageCellIndex) - *(CellStackVoltage + MinVoltageCellIndex) >= EqualizingVoltageDifference)
 80005ca:	69bb      	ldr	r3, [r7, #24]
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	68fa      	ldr	r2, [r7, #12]
 80005d0:	4413      	add	r3, r2
 80005d2:	881b      	ldrh	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	68fa      	ldr	r2, [r7, #12]
 80005dc:	4413      	add	r3, r2
 80005de:	881b      	ldrh	r3, [r3, #0]
 80005e0:	1acb      	subs	r3, r1, r3
 80005e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005e6:	db0a      	blt.n	80005fe <BMS_CheckCellStackStatus+0xc6>
	    {
		    *BalanceCellIndex = MaxVoltageCellIndex + 1;
 80005e8:	69bb      	ldr	r3, [r7, #24]
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	3301      	adds	r3, #1
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005f2:	701a      	strb	r2, [r3, #0]
            *bFlag = 1;
 80005f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005f6:	2201      	movs	r2, #1
 80005f8:	701a      	strb	r2, [r3, #0]
		    return 1;
 80005fa:	2301      	movs	r3, #1
 80005fc:	e00e      	b.n	800061c <BMS_CheckCellStackStatus+0xe4>
	    }
	    else
	    {
		    *BalanceCellIndex = 0xFF;
 80005fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000600:	22ff      	movs	r2, #255	; 0xff
 8000602:	701a      	strb	r2, [r3, #0]
            *bFlag= 0;
 8000604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
		    return 0;
 800060a:	2300      	movs	r3, #0
 800060c:	e006      	b.n	800061c <BMS_CheckCellStackStatus+0xe4>
	    }
    }
    else
    {
        *BalanceCellIndex = 0xFF;
 800060e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000610:	22ff      	movs	r2, #255	; 0xff
 8000612:	701a      	strb	r2, [r3, #0]
        *bFlag=0;
 8000614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
        return 0;
 800061a:	2300      	movs	r3, #0
    }
    return 0;
}
 800061c:	4618      	mov	r0, r3
 800061e:	3724      	adds	r7, #36	; 0x24
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr
	...

08000628 <LTC6811_get_total_voltage>:
#include "drv_LTC6811_hw.h"
#include "stdint.h"
#include "stdio.h"

uint8_t LTC6811_get_total_voltage(uint16_t *ptv)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
     uint8_t crc;
     uint8_t dasiy_rxdata[8];//����2Byte PEC���8Byte
     ltc6811_wakeup_standy();
 8000630:	f000 fb26 	bl	8000c80 <ltc6811_wakeup_standy>
     LTC681x_adstat(MD_27KHZ_14KHZ,STAT_CH_SOC);
 8000634:	2101      	movs	r1, #1
 8000636:	2001      	movs	r0, #1
 8000638:	f000 fa70 	bl	8000b1c <LTC681x_adstat>
     ltc6811_delay_ms(1);
 800063c:	2001      	movs	r0, #1
 800063e:	f000 f92f 	bl	80008a0 <ltc6811_delay_ms>
     LTC681x_rdstat_reg(1,1,dasiy_rxdata);
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	461a      	mov	r2, r3
 8000648:	2101      	movs	r1, #1
 800064a:	2001      	movs	r0, #1
 800064c:	f000 fac6 	bl	8000bdc <LTC681x_rdstat_reg>
     if(check_crc(dasiy_rxdata,1*8,&crc)==0)
 8000650:	f107 0217 	add.w	r2, r7, #23
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2108      	movs	r1, #8
 800065a:	4618      	mov	r0, r3
 800065c:	f000 f9a4 	bl	80009a8 <check_crc>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d109      	bne.n	800067a <LTC6811_get_total_voltage+0x52>
     {
        *ptv=*(uint16_t*)(&dasiy_rxdata[0]);
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	881a      	ldrh	r2, [r3, #0]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	801a      	strh	r2, [r3, #0]
        #ifdef DEBUG
            printf("get total voltage successful!\n");
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <LTC6811_get_total_voltage+0x5c>)
 8000672:	f002 fa71 	bl	8002b58 <puts>

        #endif
        return 1;
 8000676:	2301      	movs	r3, #1
 8000678:	e000      	b.n	800067c <LTC6811_get_total_voltage+0x54>
     }
     return 0;
 800067a:	2300      	movs	r3, #0
}
 800067c:	4618      	mov	r0, r3
 800067e:	3718      	adds	r7, #24
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	08003418 	.word	0x08003418

08000688 <LTC6811_Get_PerCell_Voltage>:

uint8_t LTC6811_Get_PerCell_Voltage(uint16_t* p)
{
 8000688:	b590      	push	{r4, r7, lr}
 800068a:	b087      	sub	sp, #28
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
    uint8_t i = 0,j = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	75fb      	strb	r3, [r7, #23]
 8000694:	2300      	movs	r3, #0
 8000696:	75bb      	strb	r3, [r7, #22]
    uint8_t crc = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	753b      	strb	r3, [r7, #20]
    uint8_t dasiy_rxdata[8];
    uint8_t ReturnValue = 1;
 800069c:	2301      	movs	r3, #1
 800069e:	757b      	strb	r3, [r7, #21]
    ltc6811_wakeup_standy();
 80006a0:	f000 faee 	bl	8000c80 <ltc6811_wakeup_standy>
    LTC681x_clrcell();
 80006a4:	f000 fa8c 	bl	8000bc0 <LTC681x_clrcell>
    ltc6811_delay_ms(5);
 80006a8:	2005      	movs	r0, #5
 80006aa:	f000 f8f9 	bl	80008a0 <ltc6811_delay_ms>
    LTC681x_adcvax(MD_27KHZ_14KHZ/*MD_7KHZ_3KHZ*/,DCP_DISABLED);
 80006ae:	2100      	movs	r1, #0
 80006b0:	2001      	movs	r0, #1
 80006b2:	f000 fa58 	bl	8000b66 <LTC681x_adcvax>
    ltc6811_delay_ms(10);
 80006b6:	200a      	movs	r0, #10
 80006b8:	f000 f8f2 	bl	80008a0 <ltc6811_delay_ms>
    for(i=1;i<5;i++)
 80006bc:	2301      	movs	r3, #1
 80006be:	75fb      	strb	r3, [r7, #23]
 80006c0:	e053      	b.n	800076a <LTC6811_Get_PerCell_Voltage+0xe2>
    {
        LTC681x_rdcv_reg(i,1,dasiy_rxdata);
 80006c2:	f107 020c 	add.w	r2, r7, #12
 80006c6:	7dfb      	ldrb	r3, [r7, #23]
 80006c8:	2101      	movs	r1, #1
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 f9b4 	bl	8000a38 <LTC681x_rdcv_reg>
        if(check_crc(dasiy_rxdata,8,&crc)==0)
 80006d0:	f107 0214 	add.w	r2, r7, #20
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2108      	movs	r1, #8
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 f964 	bl	80009a8 <check_crc>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d12f      	bne.n	8000746 <LTC6811_Get_PerCell_Voltage+0xbe>
        {
            for(j=0;j<3;j++)
 80006e6:	2300      	movs	r3, #0
 80006e8:	75bb      	strb	r3, [r7, #22]
 80006ea:	e023      	b.n	8000734 <LTC6811_Get_PerCell_Voltage+0xac>
                *(p+j+3*(i-1)) = dasiy_rxdata[j*2] + (dasiy_rxdata[j*2+1] << 8);
 80006ec:	7dbb      	ldrb	r3, [r7, #22]
 80006ee:	005b      	lsls	r3, r3, #1
 80006f0:	f107 0218 	add.w	r2, r7, #24
 80006f4:	4413      	add	r3, r2
 80006f6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80006fa:	b299      	uxth	r1, r3
 80006fc:	7dbb      	ldrb	r3, [r7, #22]
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	3301      	adds	r3, #1
 8000702:	f107 0218 	add.w	r2, r7, #24
 8000706:	4413      	add	r3, r2
 8000708:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800070c:	b29b      	uxth	r3, r3
 800070e:	021b      	lsls	r3, r3, #8
 8000710:	b29a      	uxth	r2, r3
 8000712:	7db8      	ldrb	r0, [r7, #22]
 8000714:	7dfb      	ldrb	r3, [r7, #23]
 8000716:	3b01      	subs	r3, #1
 8000718:	461c      	mov	r4, r3
 800071a:	4623      	mov	r3, r4
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	4423      	add	r3, r4
 8000720:	4403      	add	r3, r0
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	4403      	add	r3, r0
 8000728:	440a      	add	r2, r1
 800072a:	b292      	uxth	r2, r2
 800072c:	801a      	strh	r2, [r3, #0]
            for(j=0;j<3;j++)
 800072e:	7dbb      	ldrb	r3, [r7, #22]
 8000730:	3301      	adds	r3, #1
 8000732:	75bb      	strb	r3, [r7, #22]
 8000734:	7dbb      	ldrb	r3, [r7, #22]
 8000736:	2b02      	cmp	r3, #2
 8000738:	d9d8      	bls.n	80006ec <LTC6811_Get_PerCell_Voltage+0x64>
            ReturnValue = 1;
 800073a:	2301      	movs	r3, #1
 800073c:	757b      	strb	r3, [r7, #21]
    for(i=1;i<5;i++)
 800073e:	7dfb      	ldrb	r3, [r7, #23]
 8000740:	3301      	adds	r3, #1
 8000742:	75fb      	strb	r3, [r7, #23]
 8000744:	e011      	b.n	800076a <LTC6811_Get_PerCell_Voltage+0xe2>
            continue;
        }
        else
        {
        	for(j=0;j<12;j++)
 8000746:	2300      	movs	r3, #0
 8000748:	75bb      	strb	r3, [r7, #22]
 800074a:	e008      	b.n	800075e <LTC6811_Get_PerCell_Voltage+0xd6>
        		*(p+j) = 0;
 800074c:	7dbb      	ldrb	r3, [r7, #22]
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	4413      	add	r3, r2
 8000754:	2200      	movs	r2, #0
 8000756:	801a      	strh	r2, [r3, #0]
        	for(j=0;j<12;j++)
 8000758:	7dbb      	ldrb	r3, [r7, #22]
 800075a:	3301      	adds	r3, #1
 800075c:	75bb      	strb	r3, [r7, #22]
 800075e:	7dbb      	ldrb	r3, [r7, #22]
 8000760:	2b0b      	cmp	r3, #11
 8000762:	d9f3      	bls.n	800074c <LTC6811_Get_PerCell_Voltage+0xc4>
            ReturnValue = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	757b      	strb	r3, [r7, #21]
            break;
 8000768:	e002      	b.n	8000770 <LTC6811_Get_PerCell_Voltage+0xe8>
    for(i=1;i<5;i++)
 800076a:	7dfb      	ldrb	r3, [r7, #23]
 800076c:	2b04      	cmp	r3, #4
 800076e:	d9a8      	bls.n	80006c2 <LTC6811_Get_PerCell_Voltage+0x3a>
        }
    }
    return ReturnValue;
 8000770:	7d7b      	ldrb	r3, [r7, #21]
}
 8000772:	4618      	mov	r0, r3
 8000774:	371c      	adds	r7, #28
 8000776:	46bd      	mov	sp, r7
 8000778:	bd90      	pop	{r4, r7, pc}
	...

0800077c <spi_write_array>:

#ifdef STM32_HAL_LIBRARY
#include "stm32f1xx_hal_spi.h"
//HAl库
void spi_write_array(uint8_t len,uint8_t data[])
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	6039      	str	r1, [r7, #0]
 8000786:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Transmit(&hspi1,data,len,50);
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	b29a      	uxth	r2, r3
 800078c:	2332      	movs	r3, #50	; 0x32
 800078e:	6839      	ldr	r1, [r7, #0]
 8000790:	4803      	ldr	r0, [pc, #12]	; (80007a0 <spi_write_array+0x24>)
 8000792:	f001 fc59 	bl	8002048 <HAL_SPI_Transmit>

}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000500 	.word	0x20000500

080007a4 <spi_write_read>:

void spi_write_read(uint8_t tx_Data[],uint8_t tx_len,uint8_t* re_data,uint8_t rx_len)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	607a      	str	r2, [r7, #4]
 80007ae:	461a      	mov	r2, r3
 80007b0:	460b      	mov	r3, r1
 80007b2:	72fb      	strb	r3, [r7, #11]
 80007b4:	4613      	mov	r3, r2
 80007b6:	72bb      	strb	r3, [r7, #10]
	HAL_SPI_Transmit(&hspi1,tx_Data,tx_len,50);
 80007b8:	7afb      	ldrb	r3, [r7, #11]
 80007ba:	b29a      	uxth	r2, r3
 80007bc:	2332      	movs	r3, #50	; 0x32
 80007be:	68f9      	ldr	r1, [r7, #12]
 80007c0:	4806      	ldr	r0, [pc, #24]	; (80007dc <spi_write_read+0x38>)
 80007c2:	f001 fc41 	bl	8002048 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1,re_data,rx_len,50);
 80007c6:	7abb      	ldrb	r3, [r7, #10]
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	2332      	movs	r3, #50	; 0x32
 80007cc:	6879      	ldr	r1, [r7, #4]
 80007ce:	4803      	ldr	r0, [pc, #12]	; (80007dc <spi_write_read+0x38>)
 80007d0:	f001 fd76 	bl	80022c0 <HAL_SPI_Receive>
}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000500 	.word	0x20000500

080007e0 <pec15_calc>:
                                0x585a, 0x8ba7, 0x4e3e, 0x450c, 0x8095
                               };
uint16_t pec15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
                    uint8_t *data //Array of data that will be used to calculate  a PEC
                   )
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	6039      	str	r1, [r7, #0]
 80007ea:	71fb      	strb	r3, [r7, #7]
  uint16_t remainder,addr;
	uint16_t i;
  remainder = 16;//initialize the PEC
 80007ec:	2310      	movs	r3, #16
 80007ee:	81fb      	strh	r3, [r7, #14]
  for ( i = 0; i<len; i++) // loops for each byte in data array
 80007f0:	2300      	movs	r3, #0
 80007f2:	81bb      	strh	r3, [r7, #12]
 80007f4:	e019      	b.n	800082a <pec15_calc+0x4a>
  {
    addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 80007f6:	89fb      	ldrh	r3, [r7, #14]
 80007f8:	09db      	lsrs	r3, r3, #7
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	89bb      	ldrh	r3, [r7, #12]
 80007fe:	6839      	ldr	r1, [r7, #0]
 8000800:	440b      	add	r3, r1
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	b29b      	uxth	r3, r3
 8000806:	4053      	eors	r3, r2
 8000808:	b29b      	uxth	r3, r3
 800080a:	b2db      	uxtb	r3, r3
 800080c:	817b      	strh	r3, [r7, #10]
//#ifdef MBED
    remainder = (remainder<<8)^crc15Table[addr];
 800080e:	89fb      	ldrh	r3, [r7, #14]
 8000810:	021b      	lsls	r3, r3, #8
 8000812:	b21a      	sxth	r2, r3
 8000814:	897b      	ldrh	r3, [r7, #10]
 8000816:	490b      	ldr	r1, [pc, #44]	; (8000844 <pec15_calc+0x64>)
 8000818:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800081c:	b21b      	sxth	r3, r3
 800081e:	4053      	eors	r3, r2
 8000820:	b21b      	sxth	r3, r3
 8000822:	81fb      	strh	r3, [r7, #14]
  for ( i = 0; i<len; i++) // loops for each byte in data array
 8000824:	89bb      	ldrh	r3, [r7, #12]
 8000826:	3301      	adds	r3, #1
 8000828:	81bb      	strh	r3, [r7, #12]
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	b29b      	uxth	r3, r3
 800082e:	89ba      	ldrh	r2, [r7, #12]
 8000830:	429a      	cmp	r2, r3
 8000832:	d3e0      	bcc.n	80007f6 <pec15_calc+0x16>
//#else
    //remainder = (remainder<<8)^pgm_read_word_near(crc15Table+addr);
//#endif
  }
  return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8000834:	89fb      	ldrh	r3, [r7, #14]
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	b29b      	uxth	r3, r3
}
 800083a:	4618      	mov	r0, r3
 800083c:	3714      	adds	r7, #20
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	080034ac 	.word	0x080034ac

08000848 <wakeup_idle>:

void wakeup_idle(uint8_t total_ic)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
	char i,Wake_cmd=0xff;
 8000852:	23ff      	movs	r3, #255	; 0xff
 8000854:	73bb      	strb	r3, [r7, #14]
    for (  i =0; i<total_ic; i++)
 8000856:	2300      	movs	r3, #0
 8000858:	73fb      	strb	r3, [r7, #15]
 800085a:	e013      	b.n	8000884 <wakeup_idle+0x3c>
    {
        DASILY_RESET();
 800085c:	2200      	movs	r2, #0
 800085e:	2110      	movs	r1, #16
 8000860:	480d      	ldr	r0, [pc, #52]	; (8000898 <wakeup_idle+0x50>)
 8000862:	f000 ff6d 	bl	8001740 <HAL_GPIO_WritePin>
        //delayMicroseconds(2); //Guarantees the isoSPI will be in ready mode
        //SPI1_SendByte(0xff);
        LTC68_SPI_SendByte(Wake_cmd);
 8000866:	f107 010e 	add.w	r1, r7, #14
 800086a:	2332      	movs	r3, #50	; 0x32
 800086c:	2201      	movs	r2, #1
 800086e:	480b      	ldr	r0, [pc, #44]	; (800089c <wakeup_idle+0x54>)
 8000870:	f001 fbea 	bl	8002048 <HAL_SPI_Transmit>
        DASILY_SET();
 8000874:	2201      	movs	r2, #1
 8000876:	2110      	movs	r1, #16
 8000878:	4807      	ldr	r0, [pc, #28]	; (8000898 <wakeup_idle+0x50>)
 800087a:	f000 ff61 	bl	8001740 <HAL_GPIO_WritePin>
    for (  i =0; i<total_ic; i++)
 800087e:	7bfb      	ldrb	r3, [r7, #15]
 8000880:	3301      	adds	r3, #1
 8000882:	73fb      	strb	r3, [r7, #15]
 8000884:	7bfa      	ldrb	r2, [r7, #15]
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	429a      	cmp	r2, r3
 800088a:	d3e7      	bcc.n	800085c <wakeup_idle+0x14>
    }
}
 800088c:	bf00      	nop
 800088e:	bf00      	nop
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40010800 	.word	0x40010800
 800089c:	20000500 	.word	0x20000500

080008a0 <ltc6811_delay_ms>:
void ltc6811_delay_ms(uint16_t ms)//��֤isospi��sleep,ͬʱ��֤core������5.5ms  sleep
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	80fb      	strh	r3, [r7, #6]
	uint16_t i=0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	81fb      	strh	r3, [r7, #14]

	for(i=0;i<ms;i++)
 80008ae:	2300      	movs	r3, #0
 80008b0:	81fb      	strh	r3, [r7, #14]
 80008b2:	e008      	b.n	80008c6 <ltc6811_delay_ms+0x26>
    {
        wakeup_idle(1);
 80008b4:	2001      	movs	r0, #1
 80008b6:	f7ff ffc7 	bl	8000848 <wakeup_idle>
//		delay_us(1000);
        LTC68_Delay(1);
 80008ba:	2001      	movs	r0, #1
 80008bc:	f000 fca4 	bl	8001208 <HAL_Delay>
	for(i=0;i<ms;i++)
 80008c0:	89fb      	ldrh	r3, [r7, #14]
 80008c2:	3301      	adds	r3, #1
 80008c4:	81fb      	strh	r3, [r7, #14]
 80008c6:	89fa      	ldrh	r2, [r7, #14]
 80008c8:	88fb      	ldrh	r3, [r7, #6]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	d3f2      	bcc.n	80008b4 <ltc6811_delay_ms+0x14>
    }
	wakeup_idle(1);
 80008ce:	2001      	movs	r0, #1
 80008d0:	f7ff ffba 	bl	8000848 <wakeup_idle>
	 
}
 80008d4:	bf00      	nop
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <cmd_68>:
}



void cmd_68(uint8_t tx_cmd[2])
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  uint8_t cmd[4];
  uint16_t cmd_pec;

  cmd[0] = tx_cmd[0];
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	723b      	strb	r3, [r7, #8]
  #if LTC6811_2
	    cmd[0] = cmd[0]|LTC6811_ADD;
 80008ea:	7a3a      	ldrb	r2, [r7, #8]
 80008ec:	4b15      	ldr	r3, [pc, #84]	; (8000944 <cmd_68+0x68>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	723b      	strb	r3, [r7, #8]
   #endif
  cmd[1] =  tx_cmd[1];
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	785b      	ldrb	r3, [r3, #1]
 80008fa:	727b      	strb	r3, [r7, #9]
  cmd_pec = pec15_calc(2, cmd);
 80008fc:	f107 0308 	add.w	r3, r7, #8
 8000900:	4619      	mov	r1, r3
 8000902:	2002      	movs	r0, #2
 8000904:	f7ff ff6c 	bl	80007e0 <pec15_calc>
 8000908:	4603      	mov	r3, r0
 800090a:	81fb      	strh	r3, [r7, #14]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 800090c:	89fb      	ldrh	r3, [r7, #14]
 800090e:	0a1b      	lsrs	r3, r3, #8
 8000910:	b29b      	uxth	r3, r3
 8000912:	b2db      	uxtb	r3, r3
 8000914:	72bb      	strb	r3, [r7, #10]
  cmd[3] = (uint8_t)(cmd_pec);
 8000916:	89fb      	ldrh	r3, [r7, #14]
 8000918:	b2db      	uxtb	r3, r3
 800091a:	72fb      	strb	r3, [r7, #11]
  DASILY_RESET();
 800091c:	2200      	movs	r2, #0
 800091e:	2110      	movs	r1, #16
 8000920:	4809      	ldr	r0, [pc, #36]	; (8000948 <cmd_68+0x6c>)
 8000922:	f000 ff0d 	bl	8001740 <HAL_GPIO_WritePin>
//  delay_us(10);
  spi_write_array(4,cmd);
 8000926:	f107 0308 	add.w	r3, r7, #8
 800092a:	4619      	mov	r1, r3
 800092c:	2004      	movs	r0, #4
 800092e:	f7ff ff25 	bl	800077c <spi_write_array>
//  delay_us(10);
  DASILY_SET();
 8000932:	2201      	movs	r2, #1
 8000934:	2110      	movs	r1, #16
 8000936:	4804      	ldr	r0, [pc, #16]	; (8000948 <cmd_68+0x6c>)
 8000938:	f000 ff02 	bl	8001740 <HAL_GPIO_WritePin>
}
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000001 	.word	0x20000001
 8000948:	40010800 	.word	0x40010800

0800094c <ReserveByteOrder>:




void ReserveByteOrder(uint8_t *pData,uint8_t len)//��ת�ֽ���
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	460b      	mov	r3, r1
 8000956:	70fb      	strb	r3, [r7, #3]
		uint8_t tmp,i,j;
		j=len-1;
 8000958:	78fb      	ldrb	r3, [r7, #3]
 800095a:	3b01      	subs	r3, #1
 800095c:	73bb      	strb	r3, [r7, #14]
		for(i=0;i<j;i++,j--)
 800095e:	2300      	movs	r3, #0
 8000960:	73fb      	strb	r3, [r7, #15]
 8000962:	e017      	b.n	8000994 <ReserveByteOrder+0x48>
		{ 
				tmp=pData[i];
 8000964:	7bfb      	ldrb	r3, [r7, #15]
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	737b      	strb	r3, [r7, #13]
				pData[i]=pData[j];
 800096e:	7bbb      	ldrb	r3, [r7, #14]
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	441a      	add	r2, r3
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	6879      	ldr	r1, [r7, #4]
 8000978:	440b      	add	r3, r1
 800097a:	7812      	ldrb	r2, [r2, #0]
 800097c:	701a      	strb	r2, [r3, #0]
				pData[j]=tmp; 
 800097e:	7bbb      	ldrb	r3, [r7, #14]
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	4413      	add	r3, r2
 8000984:	7b7a      	ldrb	r2, [r7, #13]
 8000986:	701a      	strb	r2, [r3, #0]
		for(i=0;i<j;i++,j--)
 8000988:	7bfb      	ldrb	r3, [r7, #15]
 800098a:	3301      	adds	r3, #1
 800098c:	73fb      	strb	r3, [r7, #15]
 800098e:	7bbb      	ldrb	r3, [r7, #14]
 8000990:	3b01      	subs	r3, #1
 8000992:	73bb      	strb	r3, [r7, #14]
 8000994:	7bfa      	ldrb	r2, [r7, #15]
 8000996:	7bbb      	ldrb	r3, [r7, #14]
 8000998:	429a      	cmp	r2, r3
 800099a:	d3e3      	bcc.n	8000964 <ReserveByteOrder+0x18>
		}
}
 800099c:	bf00      	nop
 800099e:	bf00      	nop
 80009a0:	3714      	adds	r7, #20
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr

080009a8 <check_crc>:

char check_crc(uint8_t *prxdata,uint8_t len,uint8_t *crccode)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	460b      	mov	r3, r1
 80009b2:	607a      	str	r2, [r7, #4]
 80009b4:	72fb      	strb	r3, [r7, #11]
	//len Ϊ8�ı���
	uint8_t i,tmp;
	uint16_t crc;
	*crccode=0;	
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]
	tmp=len/8-1;
 80009bc:	7afb      	ldrb	r3, [r7, #11]
 80009be:	08db      	lsrs	r3, r3, #3
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	3b01      	subs	r3, #1
 80009c4:	75bb      	strb	r3, [r7, #22]
	tmp=1<<tmp;
 80009c6:	7dbb      	ldrb	r3, [r7, #22]
 80009c8:	2201      	movs	r2, #1
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	75bb      	strb	r3, [r7, #22]
	for(i=0;i<len;i+=8)
 80009d0:	2300      	movs	r3, #0
 80009d2:	75fb      	strb	r3, [r7, #23]
 80009d4:	e026      	b.n	8000a24 <check_crc+0x7c>
	{
		*crccode>>=1;		
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	085b      	lsrs	r3, r3, #1
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	701a      	strb	r2, [r3, #0]
		crc=pec15_calc(6,prxdata);
 80009e2:	68f9      	ldr	r1, [r7, #12]
 80009e4:	2006      	movs	r0, #6
 80009e6:	f7ff fefb 	bl	80007e0 <pec15_calc>
 80009ea:	4603      	mov	r3, r0
 80009ec:	82bb      	strh	r3, [r7, #20]
		ReserveByteOrder((uint8_t*)&crc,2);
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	2102      	movs	r1, #2
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff ffa9 	bl	800094c <ReserveByteOrder>
		if(*(uint16_t*)(prxdata+6)!=crc)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	3306      	adds	r3, #6
 80009fe:	881a      	ldrh	r2, [r3, #0]
 8000a00:	8abb      	ldrh	r3, [r7, #20]
 8000a02:	429a      	cmp	r2, r3
 8000a04:	d001      	beq.n	8000a0a <check_crc+0x62>
		{
			return 1;
 8000a06:	2301      	movs	r3, #1
 8000a08:	e011      	b.n	8000a2e <check_crc+0x86>
		}	
		*crccode=*crccode|tmp;		
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	781a      	ldrb	r2, [r3, #0]
 8000a0e:	7dbb      	ldrb	r3, [r7, #22]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	701a      	strb	r2, [r3, #0]
		 prxdata+=8;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	3308      	adds	r3, #8
 8000a1c:	60fb      	str	r3, [r7, #12]
	for(i=0;i<len;i+=8)
 8000a1e:	7dfb      	ldrb	r3, [r7, #23]
 8000a20:	3308      	adds	r3, #8
 8000a22:	75fb      	strb	r3, [r7, #23]
 8000a24:	7dfa      	ldrb	r2, [r7, #23]
 8000a26:	7afb      	ldrb	r3, [r7, #11]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d3d4      	bcc.n	80009d6 <check_crc+0x2e>
	}
	return 0;
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3718      	adds	r7, #24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <LTC681x_rdcv_reg>:
// Reads the raw cell voltage register data
void LTC681x_rdcv_reg(uint8_t reg, //Determines which cell voltage register is read back
                      uint8_t total_ic, //the number of ICs in the
                      uint8_t *data //An array of the unparsed cell codes
                     )
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	603a      	str	r2, [r7, #0]
 8000a42:	71fb      	strb	r3, [r7, #7]
 8000a44:	460b      	mov	r3, r1
 8000a46:	71bb      	strb	r3, [r7, #6]
  const uint8_t REG_LEN = 8; //number of bytes in each ICs register + 2 bytes for the PEC
 8000a48:	2308      	movs	r3, #8
 8000a4a:	73fb      	strb	r3, [r7, #15]
  uint8_t cmd[4];
  uint16_t cmd_pec;

  if (reg == 1)     //1: RDCVA
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d104      	bne.n	8000a5c <LTC681x_rdcv_reg+0x24>
  {
    cmd[1] = 0x04;
 8000a52:	2304      	movs	r3, #4
 8000a54:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8000a56:	2300      	movs	r3, #0
 8000a58:	723b      	strb	r3, [r7, #8]
 8000a5a:	e02b      	b.n	8000ab4 <LTC681x_rdcv_reg+0x7c>
  }
  else if (reg == 2) //2: RDCVB
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	d104      	bne.n	8000a6c <LTC681x_rdcv_reg+0x34>
  {
    cmd[1] = 0x06;
 8000a62:	2306      	movs	r3, #6
 8000a64:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8000a66:	2300      	movs	r3, #0
 8000a68:	723b      	strb	r3, [r7, #8]
 8000a6a:	e023      	b.n	8000ab4 <LTC681x_rdcv_reg+0x7c>
  }
  else if (reg == 3) //3: RDCVC
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	2b03      	cmp	r3, #3
 8000a70:	d104      	bne.n	8000a7c <LTC681x_rdcv_reg+0x44>
  {
    cmd[1] = 0x08;
 8000a72:	2308      	movs	r3, #8
 8000a74:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8000a76:	2300      	movs	r3, #0
 8000a78:	723b      	strb	r3, [r7, #8]
 8000a7a:	e01b      	b.n	8000ab4 <LTC681x_rdcv_reg+0x7c>
  }
  else if (reg == 4) //4: RDCVD
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	2b04      	cmp	r3, #4
 8000a80:	d104      	bne.n	8000a8c <LTC681x_rdcv_reg+0x54>
  {
    cmd[1] = 0x0A;
 8000a82:	230a      	movs	r3, #10
 8000a84:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8000a86:	2300      	movs	r3, #0
 8000a88:	723b      	strb	r3, [r7, #8]
 8000a8a:	e013      	b.n	8000ab4 <LTC681x_rdcv_reg+0x7c>
  }
  else if (reg == 5) //4: RDCVE
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	2b05      	cmp	r3, #5
 8000a90:	d104      	bne.n	8000a9c <LTC681x_rdcv_reg+0x64>
  {
    cmd[1] = 0x09;
 8000a92:	2309      	movs	r3, #9
 8000a94:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8000a96:	2300      	movs	r3, #0
 8000a98:	723b      	strb	r3, [r7, #8]
 8000a9a:	e00b      	b.n	8000ab4 <LTC681x_rdcv_reg+0x7c>
  }
  else if(reg == 6) //4: RDCVF
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	2b06      	cmp	r3, #6
 8000aa0:	d104      	bne.n	8000aac <LTC681x_rdcv_reg+0x74>
  {
    cmd[1] = 0x0B;
 8000aa2:	230b      	movs	r3, #11
 8000aa4:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	723b      	strb	r3, [r7, #8]
 8000aaa:	e003      	b.n	8000ab4 <LTC681x_rdcv_reg+0x7c>
  }
	else
	{	
			cmd[1] = 0x00;
 8000aac:	2300      	movs	r3, #0
 8000aae:	727b      	strb	r3, [r7, #9]
			cmd[0] = 0x00;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	723b      	strb	r3, [r7, #8]
	}

	#if LTC6811_2
		cmd[0] = cmd[0]|LTC6811_ADD;
 8000ab4:	7a3a      	ldrb	r2, [r7, #8]
 8000ab6:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <LTC681x_rdcv_reg+0xdc>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	723b      	strb	r3, [r7, #8]
	#endif
  cmd_pec = pec15_calc(2, cmd);
 8000ac0:	f107 0308 	add.w	r3, r7, #8
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	2002      	movs	r0, #2
 8000ac8:	f7ff fe8a 	bl	80007e0 <pec15_calc>
 8000acc:	4603      	mov	r3, r0
 8000ace:	81bb      	strh	r3, [r7, #12]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8000ad0:	89bb      	ldrh	r3, [r7, #12]
 8000ad2:	0a1b      	lsrs	r3, r3, #8
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	72bb      	strb	r3, [r7, #10]
  cmd[3] = (uint8_t)(cmd_pec);
 8000ada:	89bb      	ldrh	r3, [r7, #12]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	72fb      	strb	r3, [r7, #11]

  DASILY_RESET();
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2110      	movs	r1, #16
 8000ae4:	480c      	ldr	r0, [pc, #48]	; (8000b18 <LTC681x_rdcv_reg+0xe0>)
 8000ae6:	f000 fe2b 	bl	8001740 <HAL_GPIO_WritePin>
//  delay_us(2);
  spi_write_read(cmd,4,data,(REG_LEN*total_ic));
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
 8000aec:	79ba      	ldrb	r2, [r7, #6]
 8000aee:	fb02 f303 	mul.w	r3, r2, r3
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	f107 0008 	add.w	r0, r7, #8
 8000af8:	683a      	ldr	r2, [r7, #0]
 8000afa:	2104      	movs	r1, #4
 8000afc:	f7ff fe52 	bl	80007a4 <spi_write_read>
//  delay_us(2);
  DASILY_SET();
 8000b00:	2201      	movs	r2, #1
 8000b02:	2110      	movs	r1, #16
 8000b04:	4804      	ldr	r0, [pc, #16]	; (8000b18 <LTC681x_rdcv_reg+0xe0>)
 8000b06:	f000 fe1b 	bl	8001740 <HAL_GPIO_WritePin>

}
 8000b0a:	bf00      	nop
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000001 	.word	0x20000001
 8000b18:	40010800 	.word	0x40010800

08000b1c <LTC681x_adstat>:
//Start a Status ADC Conversion
void LTC681x_adstat(
  uint8_t MD, //ADC Mode
  uint8_t CHST //GPIO Channels to be measured
)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	460a      	mov	r2, r1
 8000b26:	71fb      	strb	r3, [r7, #7]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	71bb      	strb	r3, [r7, #6]
  uint8_t cmd[4];
  uint8_t md_bits;

  md_bits = (MD & 0x02) >> 1;
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	105b      	asrs	r3, r3, #1
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	73fb      	strb	r3, [r7, #15]
  cmd[0] = md_bits + 0x04;
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
 8000b3a:	3304      	adds	r3, #4
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	723b      	strb	r3, [r7, #8]
  md_bits = (MD & 0x01) << 7;
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	01db      	lsls	r3, r3, #7
 8000b44:	73fb      	strb	r3, [r7, #15]
  cmd[1] = md_bits + 0x68 + CHST ;
 8000b46:	7bfa      	ldrb	r2, [r7, #15]
 8000b48:	79bb      	ldrb	r3, [r7, #6]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	3368      	adds	r3, #104	; 0x68
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	727b      	strb	r3, [r7, #9]
  cmd_68(cmd);
 8000b54:	f107 0308 	add.w	r3, r7, #8
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff febf 	bl	80008dc <cmd_68>
}
 8000b5e:	bf00      	nop
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <LTC681x_adcvax>:
// Starts cell voltage  and GPIO 1&2 conversion
void LTC681x_adcvax(
  uint8_t MD, //ADC Mode
  uint8_t DCP //Discharge Permit
)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b084      	sub	sp, #16
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	460a      	mov	r2, r1
 8000b70:	71fb      	strb	r3, [r7, #7]
 8000b72:	4613      	mov	r3, r2
 8000b74:	71bb      	strb	r3, [r7, #6]
  uint8_t cmd[4];
  uint8_t md_bits;
  md_bits = (MD & 0x02) >> 1;
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	105b      	asrs	r3, r3, #1
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	73fb      	strb	r3, [r7, #15]
  cmd[0] = md_bits | 0x04;
 8000b82:	7bfb      	ldrb	r3, [r7, #15]
 8000b84:	f043 0304 	orr.w	r3, r3, #4
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	723b      	strb	r3, [r7, #8]
  md_bits = (MD & 0x01) << 7;
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	01db      	lsls	r3, r3, #7
 8000b90:	73fb      	strb	r3, [r7, #15]
  cmd[1] =  (md_bits | ((DCP&0x01)<<4)) + 0x6F;
 8000b92:	79bb      	ldrb	r3, [r7, #6]
 8000b94:	011b      	lsls	r3, r3, #4
 8000b96:	b25b      	sxtb	r3, r3
 8000b98:	f003 0310 	and.w	r3, r3, #16
 8000b9c:	b25a      	sxtb	r2, r3
 8000b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	b25b      	sxtb	r3, r3
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	336f      	adds	r3, #111	; 0x6f
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	727b      	strb	r3, [r7, #9]
  cmd_68(cmd);
 8000bae:	f107 0308 	add.w	r3, r7, #8
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fe92 	bl	80008dc <cmd_68>
}
 8000bb8:	bf00      	nop
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <LTC681x_clrcell>:
void LTC681x_clrcell(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
  uint8_t cmd[2]= {0x07 , 0x11};
 8000bc6:	f241 1307 	movw	r3, #4359	; 0x1107
 8000bca:	80bb      	strh	r3, [r7, #4]
  cmd_68(cmd);
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fe84 	bl	80008dc <cmd_68>
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <LTC681x_rdstat_reg>:

void LTC681x_rdstat_reg(uint8_t reg, //Determines which stat register is read back
                        uint8_t total_ic, //The number of ICs in the system
                        uint8_t *data //Array of the unparsed stat codes
                       )
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	603a      	str	r2, [r7, #0]
 8000be6:	71fb      	strb	r3, [r7, #7]
 8000be8:	460b      	mov	r3, r1
 8000bea:	71bb      	strb	r3, [r7, #6]
  const uint8_t REG_LEN = 8; // number of bytes in the register + 2 bytes for the PEC
 8000bec:	2308      	movs	r3, #8
 8000bee:	73fb      	strb	r3, [r7, #15]
  uint8_t cmd[4];
  uint16_t cmd_pec;


  if (reg == 1)     //Read back statiliary group A
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d104      	bne.n	8000c00 <LTC681x_rdstat_reg+0x24>
  {
    cmd[1] = 0x10;
 8000bf6:	2310      	movs	r3, #16
 8000bf8:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	723b      	strb	r3, [r7, #8]
 8000bfe:	e00b      	b.n	8000c18 <LTC681x_rdstat_reg+0x3c>
  }
  else if (reg == 2)  //Read back statiliary group B
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d104      	bne.n	8000c10 <LTC681x_rdstat_reg+0x34>
  {
    cmd[1] = 0x12;
 8000c06:	2312      	movs	r3, #18
 8000c08:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	723b      	strb	r3, [r7, #8]
 8000c0e:	e003      	b.n	8000c18 <LTC681x_rdstat_reg+0x3c>
  }

  else          //Read back statiliary group A
  {
    cmd[1] = 0x10;
 8000c10:	2310      	movs	r3, #16
 8000c12:	727b      	strb	r3, [r7, #9]
    cmd[0] = 0x00;
 8000c14:	2300      	movs	r3, #0
 8000c16:	723b      	strb	r3, [r7, #8]
  }
	#if LTC6811_2
	    cmd[0] = cmd[0]|LTC6811_ADD;
 8000c18:	7a3a      	ldrb	r2, [r7, #8]
 8000c1a:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <LTC681x_rdstat_reg+0x9c>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	723b      	strb	r3, [r7, #8]
		#endif
  cmd_pec = pec15_calc(2, cmd);
 8000c24:	f107 0308 	add.w	r3, r7, #8
 8000c28:	4619      	mov	r1, r3
 8000c2a:	2002      	movs	r0, #2
 8000c2c:	f7ff fdd8 	bl	80007e0 <pec15_calc>
 8000c30:	4603      	mov	r3, r0
 8000c32:	81bb      	strh	r3, [r7, #12]
  cmd[2] = (uint8_t)(cmd_pec >> 8);
 8000c34:	89bb      	ldrh	r3, [r7, #12]
 8000c36:	0a1b      	lsrs	r3, r3, #8
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	72bb      	strb	r3, [r7, #10]
  cmd[3] = (uint8_t)(cmd_pec);
 8000c3e:	89bb      	ldrh	r3, [r7, #12]
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	72fb      	strb	r3, [r7, #11]

  DASILY_RESET();
 8000c44:	2200      	movs	r2, #0
 8000c46:	2110      	movs	r1, #16
 8000c48:	480c      	ldr	r0, [pc, #48]	; (8000c7c <LTC681x_rdstat_reg+0xa0>)
 8000c4a:	f000 fd79 	bl	8001740 <HAL_GPIO_WritePin>
  spi_write_read(cmd,4,data,(REG_LEN*total_ic));
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
 8000c50:	79ba      	ldrb	r2, [r7, #6]
 8000c52:	fb02 f303 	mul.w	r3, r2, r3
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	f107 0008 	add.w	r0, r7, #8
 8000c5c:	683a      	ldr	r2, [r7, #0]
 8000c5e:	2104      	movs	r1, #4
 8000c60:	f7ff fda0 	bl	80007a4 <spi_write_read>
  DASILY_SET();
 8000c64:	2201      	movs	r2, #1
 8000c66:	2110      	movs	r1, #16
 8000c68:	4804      	ldr	r0, [pc, #16]	; (8000c7c <LTC681x_rdstat_reg+0xa0>)
 8000c6a:	f000 fd69 	bl	8001740 <HAL_GPIO_WritePin>

}
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000001 	.word	0x20000001
 8000c7c:	40010800 	.word	0x40010800

08000c80 <ltc6811_wakeup_standy>:


//crccode bit ��λ��ʶ������ڵڼ���group��

void ltc6811_wakeup_standy(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  	wakeup_idle(IC_COUNT);
 8000c84:	2001      	movs	r0, #1
 8000c86:	f7ff fddf 	bl	8000848 <wakeup_idle>
//	delay_us(300);//250us��֤core ����standby
	LTC68_Delay(1);
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	f000 fabc 	bl	8001208 <HAL_Delay>
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c9a:	f000 fa53 	bl	8001144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c9e:	f000 f823 	bl	8000ce8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca2:	f000 f89d 	bl	8000de0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ca6:	f000 f865 	bl	8000d74 <MX_SPI1_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


    BMS_GetBatteryTotalVol_Filter(&x);
 8000caa:	4809      	ldr	r0, [pc, #36]	; (8000cd0 <main+0x3c>)
 8000cac:	f7ff fafc 	bl	80002a8 <BMS_GetBatteryTotalVol_Filter>
    BMS_GetBatteryCellVol_Filter(y);
 8000cb0:	4808      	ldr	r0, [pc, #32]	; (8000cd4 <main+0x40>)
 8000cb2:	f7ff fb95 	bl	80003e0 <BMS_GetBatteryCellVol_Filter>
    BMS_CheckCellStackStatus(y,90,1,&z[0],&z[1],&a,&b);
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <main+0x44>)
 8000cb8:	9302      	str	r3, [sp, #8]
 8000cba:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <main+0x48>)
 8000cbc:	9301      	str	r3, [sp, #4]
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <main+0x4c>)
 8000cc0:	9300      	str	r3, [sp, #0]
 8000cc2:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <main+0x50>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	215a      	movs	r1, #90	; 0x5a
 8000cc8:	4802      	ldr	r0, [pc, #8]	; (8000cd4 <main+0x40>)
 8000cca:	f7ff fc35 	bl	8000538 <BMS_CheckCellStackStatus>
    BMS_GetBatteryTotalVol_Filter(&x);
 8000cce:	e7ec      	b.n	8000caa <main+0x16>
 8000cd0:	2000043c 	.word	0x2000043c
 8000cd4:	20000448 	.word	0x20000448
 8000cd8:	2000042d 	.word	0x2000042d
 8000cdc:	2000042c 	.word	0x2000042c
 8000ce0:	20000442 	.word	0x20000442
 8000ce4:	20000440 	.word	0x20000440

08000ce8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b090      	sub	sp, #64	; 0x40
 8000cec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cee:	f107 0318 	add.w	r3, r7, #24
 8000cf2:	2228      	movs	r2, #40	; 0x28
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f001 feb8 	bl	8002a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d26:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2c:	f107 0318 	add.w	r3, r7, #24
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 fd1d 	bl	8001770 <HAL_RCC_OscConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d3c:	f000 f88e 	bl	8000e5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d40:	230f      	movs	r3, #15
 8000d42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d44:	2302      	movs	r3, #2
 8000d46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	2102      	movs	r1, #2
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 ff88 	bl	8001c70 <HAL_RCC_ClockConfig>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d66:	f000 f879 	bl	8000e5c <Error_Handler>
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	3740      	adds	r7, #64	; 0x40
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d78:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000d7a:	4a18      	ldr	r2, [pc, #96]	; (8000ddc <MX_SPI1_Init+0x68>)
 8000d7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d7e:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000d80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d86:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000d94:	2202      	movs	r2, #2
 8000d96:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000d98:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000da0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000da4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000da6:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000da8:	2230      	movs	r2, #48	; 0x30
 8000daa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dac:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000db8:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000dc0:	220a      	movs	r2, #10
 8000dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dc4:	4804      	ldr	r0, [pc, #16]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000dc6:	f001 f8bb 	bl	8001f40 <HAL_SPI_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000dd0:	f000 f844 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000500 	.word	0x20000500
 8000ddc:	40013000 	.word	0x40013000

08000de0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de6:	f107 0308 	add.w	r3, r7, #8
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df4:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <MX_GPIO_Init+0x74>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4a16      	ldr	r2, [pc, #88]	; (8000e54 <MX_GPIO_Init+0x74>)
 8000dfa:	f043 0320 	orr.w	r3, r3, #32
 8000dfe:	6193      	str	r3, [r2, #24]
 8000e00:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <MX_GPIO_Init+0x74>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	f003 0320 	and.w	r3, r3, #32
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_GPIO_Init+0x74>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	4a10      	ldr	r2, [pc, #64]	; (8000e54 <MX_GPIO_Init+0x74>)
 8000e12:	f043 0304 	orr.w	r3, r3, #4
 8000e16:	6193      	str	r3, [r2, #24]
 8000e18:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <MX_GPIO_Init+0x74>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	f003 0304 	and.w	r3, r3, #4
 8000e20:	603b      	str	r3, [r7, #0]
 8000e22:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTC6811_CS_PIN_GPIO_Port, LTC6811_CS_PIN_Pin, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2110      	movs	r1, #16
 8000e28:	480b      	ldr	r0, [pc, #44]	; (8000e58 <MX_GPIO_Init+0x78>)
 8000e2a:	f000 fc89 	bl	8001740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LTC6811_CS_PIN_Pin */
  GPIO_InitStruct.Pin = LTC6811_CS_PIN_Pin;
 8000e2e:	2310      	movs	r3, #16
 8000e30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e32:	2301      	movs	r3, #1
 8000e34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LTC6811_CS_PIN_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	f107 0308 	add.w	r3, r7, #8
 8000e42:	4619      	mov	r1, r3
 8000e44:	4804      	ldr	r0, [pc, #16]	; (8000e58 <MX_GPIO_Init+0x78>)
 8000e46:	f000 fae7 	bl	8001418 <HAL_GPIO_Init>

}
 8000e4a:	bf00      	nop
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40010800 	.word	0x40010800

08000e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e60:	b672      	cpsid	i
}
 8000e62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <Error_Handler+0x8>
	...

08000e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <HAL_MspInit+0x5c>)
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	4a14      	ldr	r2, [pc, #80]	; (8000ec4 <HAL_MspInit+0x5c>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6193      	str	r3, [r2, #24]
 8000e7a:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <HAL_MspInit+0x5c>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <HAL_MspInit+0x5c>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	4a0e      	ldr	r2, [pc, #56]	; (8000ec4 <HAL_MspInit+0x5c>)
 8000e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e90:	61d3      	str	r3, [r2, #28]
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <HAL_MspInit+0x5c>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <HAL_MspInit+0x60>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <HAL_MspInit+0x60>)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40010000 	.word	0x40010000

08000ecc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b088      	sub	sp, #32
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a1b      	ldr	r2, [pc, #108]	; (8000f54 <HAL_SPI_MspInit+0x88>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d12f      	bne.n	8000f4c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eec:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <HAL_SPI_MspInit+0x8c>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	4a19      	ldr	r2, [pc, #100]	; (8000f58 <HAL_SPI_MspInit+0x8c>)
 8000ef2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ef6:	6193      	str	r3, [r2, #24]
 8000ef8:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <HAL_SPI_MspInit+0x8c>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f04:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <HAL_SPI_MspInit+0x8c>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	4a13      	ldr	r2, [pc, #76]	; (8000f58 <HAL_SPI_MspInit+0x8c>)
 8000f0a:	f043 0304 	orr.w	r3, r3, #4
 8000f0e:	6193      	str	r3, [r2, #24]
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <HAL_SPI_MspInit+0x8c>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	f003 0304 	and.w	r3, r3, #4
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f1c:	23a0      	movs	r3, #160	; 0xa0
 8000f1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f24:	2303      	movs	r3, #3
 8000f26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	480b      	ldr	r0, [pc, #44]	; (8000f5c <HAL_SPI_MspInit+0x90>)
 8000f30:	f000 fa72 	bl	8001418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f34:	2340      	movs	r3, #64	; 0x40
 8000f36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f40:	f107 0310 	add.w	r3, r7, #16
 8000f44:	4619      	mov	r1, r3
 8000f46:	4805      	ldr	r0, [pc, #20]	; (8000f5c <HAL_SPI_MspInit+0x90>)
 8000f48:	f000 fa66 	bl	8001418 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f4c:	bf00      	nop
 8000f4e:	3720      	adds	r7, #32
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40013000 	.word	0x40013000
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40010800 	.word	0x40010800

08000f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <NMI_Handler+0x4>

08000f66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <HardFault_Handler+0x4>

08000f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <MemManage_Handler+0x4>

08000f72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <BusFault_Handler+0x4>

08000f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <UsageFault_Handler+0x4>

08000f7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr

08000f8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr

08000f96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr

08000fa2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa6:	f000 f913 	bl	80011d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}

08000fae <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	60f8      	str	r0, [r7, #12]
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	e00a      	b.n	8000fd6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fc0:	f3af 8000 	nop.w
 8000fc4:	4601      	mov	r1, r0
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	1c5a      	adds	r2, r3, #1
 8000fca:	60ba      	str	r2, [r7, #8]
 8000fcc:	b2ca      	uxtb	r2, r1
 8000fce:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	dbf0      	blt.n	8000fc0 <_read+0x12>
	}

return len;
 8000fde:	687b      	ldr	r3, [r7, #4]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	e009      	b.n	800100e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	1c5a      	adds	r2, r3, #1
 8000ffe:	60ba      	str	r2, [r7, #8]
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	4618      	mov	r0, r3
 8001004:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	3301      	adds	r3, #1
 800100c:	617b      	str	r3, [r7, #20]
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	429a      	cmp	r2, r3
 8001014:	dbf1      	blt.n	8000ffa <_write+0x12>
	}
	return len;
 8001016:	687b      	ldr	r3, [r7, #4]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <_close>:

int _close(int file)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	return -1;
 8001028:	f04f 33ff 	mov.w	r3, #4294967295
}
 800102c:	4618      	mov	r0, r3
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr

08001036 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001036:	b480      	push	{r7}
 8001038:	b083      	sub	sp, #12
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
 800103e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001046:	605a      	str	r2, [r3, #4]
	return 0;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <_isatty>:

int _isatty(int file)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	return 1;
 800105c:	2301      	movs	r3, #1
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr

08001068 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
	return 0;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001088:	4a14      	ldr	r2, [pc, #80]	; (80010dc <_sbrk+0x5c>)
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <_sbrk+0x60>)
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001094:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <_sbrk+0x64>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d102      	bne.n	80010a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <_sbrk+0x64>)
 800109e:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <_sbrk+0x68>)
 80010a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <_sbrk+0x64>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d207      	bcs.n	80010c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010b0:	f001 fcb2 	bl	8002a18 <__errno>
 80010b4:	4603      	mov	r3, r0
 80010b6:	220c      	movs	r2, #12
 80010b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
 80010be:	e009      	b.n	80010d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <_sbrk+0x64>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <_sbrk+0x64>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	4a05      	ldr	r2, [pc, #20]	; (80010e4 <_sbrk+0x64>)
 80010d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010d2:	68fb      	ldr	r3, [r7, #12]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	2000c000 	.word	0x2000c000
 80010e0:	00000400 	.word	0x00000400
 80010e4:	20000430 	.word	0x20000430
 80010e8:	20000570 	.word	0x20000570

080010ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr

080010f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f8:	480c      	ldr	r0, [pc, #48]	; (800112c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010fa:	490d      	ldr	r1, [pc, #52]	; (8001130 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010fc:	4a0d      	ldr	r2, [pc, #52]	; (8001134 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001100:	e002      	b.n	8001108 <LoopCopyDataInit>

08001102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001106:	3304      	adds	r3, #4

08001108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800110c:	d3f9      	bcc.n	8001102 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110e:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001110:	4c0a      	ldr	r4, [pc, #40]	; (800113c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001114:	e001      	b.n	800111a <LoopFillZerobss>

08001116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001118:	3204      	adds	r2, #4

0800111a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800111c:	d3fb      	bcc.n	8001116 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800111e:	f7ff ffe5 	bl	80010ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001122:	f001 fc7f 	bl	8002a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001126:	f7ff fdb5 	bl	8000c94 <main>
  bx lr
 800112a:	4770      	bx	lr
  ldr r0, =_sdata
 800112c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001130:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001134:	08003728 	.word	0x08003728
  ldr r2, =_sbss
 8001138:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800113c:	2000056c 	.word	0x2000056c

08001140 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001140:	e7fe      	b.n	8001140 <ADC1_2_IRQHandler>
	...

08001144 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <HAL_Init+0x28>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a07      	ldr	r2, [pc, #28]	; (800116c <HAL_Init+0x28>)
 800114e:	f043 0310 	orr.w	r3, r3, #16
 8001152:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001154:	2003      	movs	r0, #3
 8001156:	f000 f92b 	bl	80013b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800115a:	2000      	movs	r0, #0
 800115c:	f000 f808 	bl	8001170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001160:	f7ff fe82 	bl	8000e68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40022000 	.word	0x40022000

08001170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <HAL_InitTick+0x54>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_InitTick+0x58>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001186:	fbb3 f3f1 	udiv	r3, r3, r1
 800118a:	fbb2 f3f3 	udiv	r3, r2, r3
 800118e:	4618      	mov	r0, r3
 8001190:	f000 f935 	bl	80013fe <HAL_SYSTICK_Config>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e00e      	b.n	80011bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b0f      	cmp	r3, #15
 80011a2:	d80a      	bhi.n	80011ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a4:	2200      	movs	r2, #0
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f000 f90b 	bl	80013c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b0:	4a06      	ldr	r2, [pc, #24]	; (80011cc <HAL_InitTick+0x5c>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	e000      	b.n	80011bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000004 	.word	0x20000004
 80011c8:	2000000c 	.word	0x2000000c
 80011cc:	20000008 	.word	0x20000008

080011d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <HAL_IncTick+0x1c>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <HAL_IncTick+0x20>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4413      	add	r3, r2
 80011e0:	4a03      	ldr	r2, [pc, #12]	; (80011f0 <HAL_IncTick+0x20>)
 80011e2:	6013      	str	r3, [r2, #0]
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr
 80011ec:	2000000c 	.word	0x2000000c
 80011f0:	20000558 	.word	0x20000558

080011f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return uwTick;
 80011f8:	4b02      	ldr	r3, [pc, #8]	; (8001204 <HAL_GetTick+0x10>)
 80011fa:	681b      	ldr	r3, [r3, #0]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	20000558 	.word	0x20000558

08001208 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001210:	f7ff fff0 	bl	80011f4 <HAL_GetTick>
 8001214:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001220:	d005      	beq.n	800122e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <HAL_Delay+0x44>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4413      	add	r3, r2
 800122c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800122e:	bf00      	nop
 8001230:	f7ff ffe0 	bl	80011f4 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	429a      	cmp	r2, r3
 800123e:	d8f7      	bhi.n	8001230 <HAL_Delay+0x28>
  {
  }
}
 8001240:	bf00      	nop
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	2000000c 	.word	0x2000000c

08001250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800126c:	4013      	ands	r3, r2
 800126e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001278:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800127c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001282:	4a04      	ldr	r2, [pc, #16]	; (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	60d3      	str	r3, [r2, #12]
}
 8001288:	bf00      	nop
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800129c:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <__NVIC_GetPriorityGrouping+0x18>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	0a1b      	lsrs	r3, r3, #8
 80012a2:	f003 0307 	and.w	r3, r3, #7
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	6039      	str	r1, [r7, #0]
 80012be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	db0a      	blt.n	80012de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	490c      	ldr	r1, [pc, #48]	; (8001300 <__NVIC_SetPriority+0x4c>)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	0112      	lsls	r2, r2, #4
 80012d4:	b2d2      	uxtb	r2, r2
 80012d6:	440b      	add	r3, r1
 80012d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012dc:	e00a      	b.n	80012f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	4908      	ldr	r1, [pc, #32]	; (8001304 <__NVIC_SetPriority+0x50>)
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	3b04      	subs	r3, #4
 80012ec:	0112      	lsls	r2, r2, #4
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	440b      	add	r3, r1
 80012f2:	761a      	strb	r2, [r3, #24]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000e100 	.word	0xe000e100
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001308:	b480      	push	{r7}
 800130a:	b089      	sub	sp, #36	; 0x24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f1c3 0307 	rsb	r3, r3, #7
 8001322:	2b04      	cmp	r3, #4
 8001324:	bf28      	it	cs
 8001326:	2304      	movcs	r3, #4
 8001328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3304      	adds	r3, #4
 800132e:	2b06      	cmp	r3, #6
 8001330:	d902      	bls.n	8001338 <NVIC_EncodePriority+0x30>
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3b03      	subs	r3, #3
 8001336:	e000      	b.n	800133a <NVIC_EncodePriority+0x32>
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	f04f 32ff 	mov.w	r2, #4294967295
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43da      	mvns	r2, r3
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	401a      	ands	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001350:	f04f 31ff 	mov.w	r1, #4294967295
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	fa01 f303 	lsl.w	r3, r1, r3
 800135a:	43d9      	mvns	r1, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001360:	4313      	orrs	r3, r2
         );
}
 8001362:	4618      	mov	r0, r3
 8001364:	3724      	adds	r7, #36	; 0x24
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr

0800136c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800137c:	d301      	bcc.n	8001382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800137e:	2301      	movs	r3, #1
 8001380:	e00f      	b.n	80013a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001382:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <SysTick_Config+0x40>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138a:	210f      	movs	r1, #15
 800138c:	f04f 30ff 	mov.w	r0, #4294967295
 8001390:	f7ff ff90 	bl	80012b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <SysTick_Config+0x40>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139a:	4b04      	ldr	r3, [pc, #16]	; (80013ac <SysTick_Config+0x40>)
 800139c:	2207      	movs	r2, #7
 800139e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	e000e010 	.word	0xe000e010

080013b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ff49 	bl	8001250 <__NVIC_SetPriorityGrouping>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4603      	mov	r3, r0
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013d8:	f7ff ff5e 	bl	8001298 <__NVIC_GetPriorityGrouping>
 80013dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	6978      	ldr	r0, [r7, #20]
 80013e4:	f7ff ff90 	bl	8001308 <NVIC_EncodePriority>
 80013e8:	4602      	mov	r2, r0
 80013ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff5f 	bl	80012b4 <__NVIC_SetPriority>
}
 80013f6:	bf00      	nop
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ffb0 	bl	800136c <SysTick_Config>
 800140c:	4603      	mov	r3, r0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001418:	b480      	push	{r7}
 800141a:	b08b      	sub	sp, #44	; 0x2c
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001422:	2300      	movs	r3, #0
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001426:	2300      	movs	r3, #0
 8001428:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800142a:	e179      	b.n	8001720 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800142c:	2201      	movs	r2, #1
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	69fa      	ldr	r2, [r7, #28]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	429a      	cmp	r2, r3
 8001446:	f040 8168 	bne.w	800171a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	4aa0      	ldr	r2, [pc, #640]	; (80016d0 <HAL_GPIO_Init+0x2b8>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d05e      	beq.n	8001512 <HAL_GPIO_Init+0xfa>
 8001454:	4a9e      	ldr	r2, [pc, #632]	; (80016d0 <HAL_GPIO_Init+0x2b8>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d875      	bhi.n	8001546 <HAL_GPIO_Init+0x12e>
 800145a:	4a9e      	ldr	r2, [pc, #632]	; (80016d4 <HAL_GPIO_Init+0x2bc>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d058      	beq.n	8001512 <HAL_GPIO_Init+0xfa>
 8001460:	4a9c      	ldr	r2, [pc, #624]	; (80016d4 <HAL_GPIO_Init+0x2bc>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d86f      	bhi.n	8001546 <HAL_GPIO_Init+0x12e>
 8001466:	4a9c      	ldr	r2, [pc, #624]	; (80016d8 <HAL_GPIO_Init+0x2c0>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d052      	beq.n	8001512 <HAL_GPIO_Init+0xfa>
 800146c:	4a9a      	ldr	r2, [pc, #616]	; (80016d8 <HAL_GPIO_Init+0x2c0>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d869      	bhi.n	8001546 <HAL_GPIO_Init+0x12e>
 8001472:	4a9a      	ldr	r2, [pc, #616]	; (80016dc <HAL_GPIO_Init+0x2c4>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d04c      	beq.n	8001512 <HAL_GPIO_Init+0xfa>
 8001478:	4a98      	ldr	r2, [pc, #608]	; (80016dc <HAL_GPIO_Init+0x2c4>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d863      	bhi.n	8001546 <HAL_GPIO_Init+0x12e>
 800147e:	4a98      	ldr	r2, [pc, #608]	; (80016e0 <HAL_GPIO_Init+0x2c8>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d046      	beq.n	8001512 <HAL_GPIO_Init+0xfa>
 8001484:	4a96      	ldr	r2, [pc, #600]	; (80016e0 <HAL_GPIO_Init+0x2c8>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d85d      	bhi.n	8001546 <HAL_GPIO_Init+0x12e>
 800148a:	2b12      	cmp	r3, #18
 800148c:	d82a      	bhi.n	80014e4 <HAL_GPIO_Init+0xcc>
 800148e:	2b12      	cmp	r3, #18
 8001490:	d859      	bhi.n	8001546 <HAL_GPIO_Init+0x12e>
 8001492:	a201      	add	r2, pc, #4	; (adr r2, 8001498 <HAL_GPIO_Init+0x80>)
 8001494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001498:	08001513 	.word	0x08001513
 800149c:	080014ed 	.word	0x080014ed
 80014a0:	080014ff 	.word	0x080014ff
 80014a4:	08001541 	.word	0x08001541
 80014a8:	08001547 	.word	0x08001547
 80014ac:	08001547 	.word	0x08001547
 80014b0:	08001547 	.word	0x08001547
 80014b4:	08001547 	.word	0x08001547
 80014b8:	08001547 	.word	0x08001547
 80014bc:	08001547 	.word	0x08001547
 80014c0:	08001547 	.word	0x08001547
 80014c4:	08001547 	.word	0x08001547
 80014c8:	08001547 	.word	0x08001547
 80014cc:	08001547 	.word	0x08001547
 80014d0:	08001547 	.word	0x08001547
 80014d4:	08001547 	.word	0x08001547
 80014d8:	08001547 	.word	0x08001547
 80014dc:	080014f5 	.word	0x080014f5
 80014e0:	08001509 	.word	0x08001509
 80014e4:	4a7f      	ldr	r2, [pc, #508]	; (80016e4 <HAL_GPIO_Init+0x2cc>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d013      	beq.n	8001512 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014ea:	e02c      	b.n	8001546 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	623b      	str	r3, [r7, #32]
          break;
 80014f2:	e029      	b.n	8001548 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	3304      	adds	r3, #4
 80014fa:	623b      	str	r3, [r7, #32]
          break;
 80014fc:	e024      	b.n	8001548 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	3308      	adds	r3, #8
 8001504:	623b      	str	r3, [r7, #32]
          break;
 8001506:	e01f      	b.n	8001548 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	330c      	adds	r3, #12
 800150e:	623b      	str	r3, [r7, #32]
          break;
 8001510:	e01a      	b.n	8001548 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d102      	bne.n	8001520 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800151a:	2304      	movs	r3, #4
 800151c:	623b      	str	r3, [r7, #32]
          break;
 800151e:	e013      	b.n	8001548 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d105      	bne.n	8001534 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001528:	2308      	movs	r3, #8
 800152a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69fa      	ldr	r2, [r7, #28]
 8001530:	611a      	str	r2, [r3, #16]
          break;
 8001532:	e009      	b.n	8001548 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001534:	2308      	movs	r3, #8
 8001536:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	69fa      	ldr	r2, [r7, #28]
 800153c:	615a      	str	r2, [r3, #20]
          break;
 800153e:	e003      	b.n	8001548 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001540:	2300      	movs	r3, #0
 8001542:	623b      	str	r3, [r7, #32]
          break;
 8001544:	e000      	b.n	8001548 <HAL_GPIO_Init+0x130>
          break;
 8001546:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	2bff      	cmp	r3, #255	; 0xff
 800154c:	d801      	bhi.n	8001552 <HAL_GPIO_Init+0x13a>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	e001      	b.n	8001556 <HAL_GPIO_Init+0x13e>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3304      	adds	r3, #4
 8001556:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	2bff      	cmp	r3, #255	; 0xff
 800155c:	d802      	bhi.n	8001564 <HAL_GPIO_Init+0x14c>
 800155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	e002      	b.n	800156a <HAL_GPIO_Init+0x152>
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	3b08      	subs	r3, #8
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	210f      	movs	r1, #15
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	fa01 f303 	lsl.w	r3, r1, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	401a      	ands	r2, r3
 800157c:	6a39      	ldr	r1, [r7, #32]
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	fa01 f303 	lsl.w	r3, r1, r3
 8001584:	431a      	orrs	r2, r3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001592:	2b00      	cmp	r3, #0
 8001594:	f000 80c1 	beq.w	800171a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001598:	4b53      	ldr	r3, [pc, #332]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	4a52      	ldr	r2, [pc, #328]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	6193      	str	r3, [r2, #24]
 80015a4:	4b50      	ldr	r3, [pc, #320]	; (80016e8 <HAL_GPIO_Init+0x2d0>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015b0:	4a4e      	ldr	r2, [pc, #312]	; (80016ec <HAL_GPIO_Init+0x2d4>)
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	089b      	lsrs	r3, r3, #2
 80015b6:	3302      	adds	r3, #2
 80015b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	f003 0303 	and.w	r3, r3, #3
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	220f      	movs	r2, #15
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	4013      	ands	r3, r2
 80015d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a46      	ldr	r2, [pc, #280]	; (80016f0 <HAL_GPIO_Init+0x2d8>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d01f      	beq.n	800161c <HAL_GPIO_Init+0x204>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a45      	ldr	r2, [pc, #276]	; (80016f4 <HAL_GPIO_Init+0x2dc>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d019      	beq.n	8001618 <HAL_GPIO_Init+0x200>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a44      	ldr	r2, [pc, #272]	; (80016f8 <HAL_GPIO_Init+0x2e0>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d013      	beq.n	8001614 <HAL_GPIO_Init+0x1fc>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a43      	ldr	r2, [pc, #268]	; (80016fc <HAL_GPIO_Init+0x2e4>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d00d      	beq.n	8001610 <HAL_GPIO_Init+0x1f8>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a42      	ldr	r2, [pc, #264]	; (8001700 <HAL_GPIO_Init+0x2e8>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d007      	beq.n	800160c <HAL_GPIO_Init+0x1f4>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a41      	ldr	r2, [pc, #260]	; (8001704 <HAL_GPIO_Init+0x2ec>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d101      	bne.n	8001608 <HAL_GPIO_Init+0x1f0>
 8001604:	2305      	movs	r3, #5
 8001606:	e00a      	b.n	800161e <HAL_GPIO_Init+0x206>
 8001608:	2306      	movs	r3, #6
 800160a:	e008      	b.n	800161e <HAL_GPIO_Init+0x206>
 800160c:	2304      	movs	r3, #4
 800160e:	e006      	b.n	800161e <HAL_GPIO_Init+0x206>
 8001610:	2303      	movs	r3, #3
 8001612:	e004      	b.n	800161e <HAL_GPIO_Init+0x206>
 8001614:	2302      	movs	r3, #2
 8001616:	e002      	b.n	800161e <HAL_GPIO_Init+0x206>
 8001618:	2301      	movs	r3, #1
 800161a:	e000      	b.n	800161e <HAL_GPIO_Init+0x206>
 800161c:	2300      	movs	r3, #0
 800161e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001620:	f002 0203 	and.w	r2, r2, #3
 8001624:	0092      	lsls	r2, r2, #2
 8001626:	4093      	lsls	r3, r2
 8001628:	68fa      	ldr	r2, [r7, #12]
 800162a:	4313      	orrs	r3, r2
 800162c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800162e:	492f      	ldr	r1, [pc, #188]	; (80016ec <HAL_GPIO_Init+0x2d4>)
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	089b      	lsrs	r3, r3, #2
 8001634:	3302      	adds	r3, #2
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d006      	beq.n	8001656 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001648:	4b2f      	ldr	r3, [pc, #188]	; (8001708 <HAL_GPIO_Init+0x2f0>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	492e      	ldr	r1, [pc, #184]	; (8001708 <HAL_GPIO_Init+0x2f0>)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	4313      	orrs	r3, r2
 8001652:	600b      	str	r3, [r1, #0]
 8001654:	e006      	b.n	8001664 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001656:	4b2c      	ldr	r3, [pc, #176]	; (8001708 <HAL_GPIO_Init+0x2f0>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	43db      	mvns	r3, r3
 800165e:	492a      	ldr	r1, [pc, #168]	; (8001708 <HAL_GPIO_Init+0x2f0>)
 8001660:	4013      	ands	r3, r2
 8001662:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d006      	beq.n	800167e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001670:	4b25      	ldr	r3, [pc, #148]	; (8001708 <HAL_GPIO_Init+0x2f0>)
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	4924      	ldr	r1, [pc, #144]	; (8001708 <HAL_GPIO_Init+0x2f0>)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	4313      	orrs	r3, r2
 800167a:	604b      	str	r3, [r1, #4]
 800167c:	e006      	b.n	800168c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800167e:	4b22      	ldr	r3, [pc, #136]	; (8001708 <HAL_GPIO_Init+0x2f0>)
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	43db      	mvns	r3, r3
 8001686:	4920      	ldr	r1, [pc, #128]	; (8001708 <HAL_GPIO_Init+0x2f0>)
 8001688:	4013      	ands	r3, r2
 800168a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d006      	beq.n	80016a6 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001698:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <HAL_GPIO_Init+0x2f0>)
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	491a      	ldr	r1, [pc, #104]	; (8001708 <HAL_GPIO_Init+0x2f0>)
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	608b      	str	r3, [r1, #8]
 80016a4:	e006      	b.n	80016b4 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016a6:	4b18      	ldr	r3, [pc, #96]	; (8001708 <HAL_GPIO_Init+0x2f0>)
 80016a8:	689a      	ldr	r2, [r3, #8]
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	43db      	mvns	r3, r3
 80016ae:	4916      	ldr	r1, [pc, #88]	; (8001708 <HAL_GPIO_Init+0x2f0>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d025      	beq.n	800170c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <HAL_GPIO_Init+0x2f0>)
 80016c2:	68da      	ldr	r2, [r3, #12]
 80016c4:	4910      	ldr	r1, [pc, #64]	; (8001708 <HAL_GPIO_Init+0x2f0>)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	60cb      	str	r3, [r1, #12]
 80016cc:	e025      	b.n	800171a <HAL_GPIO_Init+0x302>
 80016ce:	bf00      	nop
 80016d0:	10320000 	.word	0x10320000
 80016d4:	10310000 	.word	0x10310000
 80016d8:	10220000 	.word	0x10220000
 80016dc:	10210000 	.word	0x10210000
 80016e0:	10120000 	.word	0x10120000
 80016e4:	10110000 	.word	0x10110000
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40010000 	.word	0x40010000
 80016f0:	40010800 	.word	0x40010800
 80016f4:	40010c00 	.word	0x40010c00
 80016f8:	40011000 	.word	0x40011000
 80016fc:	40011400 	.word	0x40011400
 8001700:	40011800 	.word	0x40011800
 8001704:	40011c00 	.word	0x40011c00
 8001708:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800170c:	4b0b      	ldr	r3, [pc, #44]	; (800173c <HAL_GPIO_Init+0x324>)
 800170e:	68da      	ldr	r2, [r3, #12]
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	43db      	mvns	r3, r3
 8001714:	4909      	ldr	r1, [pc, #36]	; (800173c <HAL_GPIO_Init+0x324>)
 8001716:	4013      	ands	r3, r2
 8001718:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	3301      	adds	r3, #1
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001726:	fa22 f303 	lsr.w	r3, r2, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	f47f ae7e 	bne.w	800142c <HAL_GPIO_Init+0x14>
  }
}
 8001730:	bf00      	nop
 8001732:	bf00      	nop
 8001734:	372c      	adds	r7, #44	; 0x2c
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr
 800173c:	40010400 	.word	0x40010400

08001740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	807b      	strh	r3, [r7, #2]
 800174c:	4613      	mov	r3, r2
 800174e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001750:	787b      	ldrb	r3, [r7, #1]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001756:	887a      	ldrh	r2, [r7, #2]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800175c:	e003      	b.n	8001766 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800175e:	887b      	ldrh	r3, [r7, #2]
 8001760:	041a      	lsls	r2, r3, #16
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	611a      	str	r2, [r3, #16]
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr

08001770 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e26c      	b.n	8001c5c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	f000 8087 	beq.w	800189e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001790:	4b92      	ldr	r3, [pc, #584]	; (80019dc <HAL_RCC_OscConfig+0x26c>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 030c 	and.w	r3, r3, #12
 8001798:	2b04      	cmp	r3, #4
 800179a:	d00c      	beq.n	80017b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800179c:	4b8f      	ldr	r3, [pc, #572]	; (80019dc <HAL_RCC_OscConfig+0x26c>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 030c 	and.w	r3, r3, #12
 80017a4:	2b08      	cmp	r3, #8
 80017a6:	d112      	bne.n	80017ce <HAL_RCC_OscConfig+0x5e>
 80017a8:	4b8c      	ldr	r3, [pc, #560]	; (80019dc <HAL_RCC_OscConfig+0x26c>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b4:	d10b      	bne.n	80017ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b6:	4b89      	ldr	r3, [pc, #548]	; (80019dc <HAL_RCC_OscConfig+0x26c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d06c      	beq.n	800189c <HAL_RCC_OscConfig+0x12c>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d168      	bne.n	800189c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e246      	b.n	8001c5c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d6:	d106      	bne.n	80017e6 <HAL_RCC_OscConfig+0x76>
 80017d8:	4b80      	ldr	r3, [pc, #512]	; (80019dc <HAL_RCC_OscConfig+0x26c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a7f      	ldr	r2, [pc, #508]	; (80019dc <HAL_RCC_OscConfig+0x26c>)
 80017de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	e02e      	b.n	8001844 <HAL_RCC_OscConfig+0xd4>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10c      	bne.n	8001808 <HAL_RCC_OscConfig+0x98>
 80017ee:	4b7b      	ldr	r3, [pc, #492]	; (80019dc <HAL_RCC_OscConfig+0x26c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a7a      	ldr	r2, [pc, #488]	; (80019dc <HAL_RCC_OscConfig+0x26c>)
 80017f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	4b78      	ldr	r3, [pc, #480]	; (80019dc <HAL_RCC_OscConfig+0x26c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a77      	ldr	r2, [pc, #476]	; (80019dc <HAL_RCC_OscConfig+0x26c>)
 8001800:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	e01d      	b.n	8001844 <HAL_RCC_OscConfig+0xd4>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001810:	d10c      	bne.n	800182c <HAL_RCC_OscConfig+0xbc>
 8001812:	4b72      	ldr	r3, [pc, #456]	; (80019dc <HAL_RCC_OscConfig+0x26c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a71      	ldr	r2, [pc, #452]	; (80019dc <HAL_RCC_OscConfig+0x26c>)
 8001818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	4b6f      	ldr	r3, [pc, #444]	; (80019dc <HAL_RCC_OscConfig+0x26c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a6e      	ldr	r2, [pc, #440]	; (80019dc <HAL_RCC_OscConfig+0x26c>)
 8001824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	e00b      	b.n	8001844 <HAL_RCC_OscConfig+0xd4>
 800182c:	4b6b      	ldr	r3, [pc, #428]	; (80019dc <HAL_RCC_OscConfig+0x26c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a6a      	ldr	r2, [pc, #424]	; (80019dc <HAL_RCC_OscConfig+0x26c>)
 8001832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	4b68      	ldr	r3, [pc, #416]	; (80019dc <HAL_RCC_OscConfig+0x26c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a67      	ldr	r2, [pc, #412]	; (80019dc <HAL_RCC_OscConfig+0x26c>)
 800183e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001842:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d013      	beq.n	8001874 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184c:	f7ff fcd2 	bl	80011f4 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001854:	f7ff fcce 	bl	80011f4 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b64      	cmp	r3, #100	; 0x64
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e1fa      	b.n	8001c5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001866:	4b5d      	ldr	r3, [pc, #372]	; (80019dc <HAL_RCC_OscConfig+0x26c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0f0      	beq.n	8001854 <HAL_RCC_OscConfig+0xe4>
 8001872:	e014      	b.n	800189e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001874:	f7ff fcbe 	bl	80011f4 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800187c:	f7ff fcba 	bl	80011f4 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b64      	cmp	r3, #100	; 0x64
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e1e6      	b.n	8001c5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800188e:	4b53      	ldr	r3, [pc, #332]	; (80019dc <HAL_RCC_OscConfig+0x26c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f0      	bne.n	800187c <HAL_RCC_OscConfig+0x10c>
 800189a:	e000      	b.n	800189e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d063      	beq.n	8001972 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018aa:	4b4c      	ldr	r3, [pc, #304]	; (80019dc <HAL_RCC_OscConfig+0x26c>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 030c 	and.w	r3, r3, #12
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00b      	beq.n	80018ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018b6:	4b49      	ldr	r3, [pc, #292]	; (80019dc <HAL_RCC_OscConfig+0x26c>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f003 030c 	and.w	r3, r3, #12
 80018be:	2b08      	cmp	r3, #8
 80018c0:	d11c      	bne.n	80018fc <HAL_RCC_OscConfig+0x18c>
 80018c2:	4b46      	ldr	r3, [pc, #280]	; (80019dc <HAL_RCC_OscConfig+0x26c>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d116      	bne.n	80018fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ce:	4b43      	ldr	r3, [pc, #268]	; (80019dc <HAL_RCC_OscConfig+0x26c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d005      	beq.n	80018e6 <HAL_RCC_OscConfig+0x176>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d001      	beq.n	80018e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e1ba      	b.n	8001c5c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e6:	4b3d      	ldr	r3, [pc, #244]	; (80019dc <HAL_RCC_OscConfig+0x26c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	4939      	ldr	r1, [pc, #228]	; (80019dc <HAL_RCC_OscConfig+0x26c>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018fa:	e03a      	b.n	8001972 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d020      	beq.n	8001946 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001904:	4b36      	ldr	r3, [pc, #216]	; (80019e0 <HAL_RCC_OscConfig+0x270>)
 8001906:	2201      	movs	r2, #1
 8001908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190a:	f7ff fc73 	bl	80011f4 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001912:	f7ff fc6f 	bl	80011f4 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e19b      	b.n	8001c5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001924:	4b2d      	ldr	r3, [pc, #180]	; (80019dc <HAL_RCC_OscConfig+0x26c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0f0      	beq.n	8001912 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001930:	4b2a      	ldr	r3, [pc, #168]	; (80019dc <HAL_RCC_OscConfig+0x26c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	695b      	ldr	r3, [r3, #20]
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	4927      	ldr	r1, [pc, #156]	; (80019dc <HAL_RCC_OscConfig+0x26c>)
 8001940:	4313      	orrs	r3, r2
 8001942:	600b      	str	r3, [r1, #0]
 8001944:	e015      	b.n	8001972 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001946:	4b26      	ldr	r3, [pc, #152]	; (80019e0 <HAL_RCC_OscConfig+0x270>)
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194c:	f7ff fc52 	bl	80011f4 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001954:	f7ff fc4e 	bl	80011f4 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e17a      	b.n	8001c5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001966:	4b1d      	ldr	r3, [pc, #116]	; (80019dc <HAL_RCC_OscConfig+0x26c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f0      	bne.n	8001954 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	2b00      	cmp	r3, #0
 800197c:	d03a      	beq.n	80019f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d019      	beq.n	80019ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001986:	4b17      	ldr	r3, [pc, #92]	; (80019e4 <HAL_RCC_OscConfig+0x274>)
 8001988:	2201      	movs	r2, #1
 800198a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800198c:	f7ff fc32 	bl	80011f4 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001994:	f7ff fc2e 	bl	80011f4 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e15a      	b.n	8001c5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a6:	4b0d      	ldr	r3, [pc, #52]	; (80019dc <HAL_RCC_OscConfig+0x26c>)
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f0      	beq.n	8001994 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019b2:	2001      	movs	r0, #1
 80019b4:	f000 faa6 	bl	8001f04 <RCC_Delay>
 80019b8:	e01c      	b.n	80019f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ba:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <HAL_RCC_OscConfig+0x274>)
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c0:	f7ff fc18 	bl	80011f4 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c6:	e00f      	b.n	80019e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c8:	f7ff fc14 	bl	80011f4 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d908      	bls.n	80019e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e140      	b.n	8001c5c <HAL_RCC_OscConfig+0x4ec>
 80019da:	bf00      	nop
 80019dc:	40021000 	.word	0x40021000
 80019e0:	42420000 	.word	0x42420000
 80019e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e8:	4b9e      	ldr	r3, [pc, #632]	; (8001c64 <HAL_RCC_OscConfig+0x4f4>)
 80019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1e9      	bne.n	80019c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	f000 80a6 	beq.w	8001b4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a02:	2300      	movs	r3, #0
 8001a04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a06:	4b97      	ldr	r3, [pc, #604]	; (8001c64 <HAL_RCC_OscConfig+0x4f4>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10d      	bne.n	8001a2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a12:	4b94      	ldr	r3, [pc, #592]	; (8001c64 <HAL_RCC_OscConfig+0x4f4>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	4a93      	ldr	r2, [pc, #588]	; (8001c64 <HAL_RCC_OscConfig+0x4f4>)
 8001a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a1c:	61d3      	str	r3, [r2, #28]
 8001a1e:	4b91      	ldr	r3, [pc, #580]	; (8001c64 <HAL_RCC_OscConfig+0x4f4>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a2e:	4b8e      	ldr	r3, [pc, #568]	; (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d118      	bne.n	8001a6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a3a:	4b8b      	ldr	r3, [pc, #556]	; (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a8a      	ldr	r2, [pc, #552]	; (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a46:	f7ff fbd5 	bl	80011f4 <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a4e:	f7ff fbd1 	bl	80011f4 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b64      	cmp	r3, #100	; 0x64
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e0fd      	b.n	8001c5c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a60:	4b81      	ldr	r3, [pc, #516]	; (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d0f0      	beq.n	8001a4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d106      	bne.n	8001a82 <HAL_RCC_OscConfig+0x312>
 8001a74:	4b7b      	ldr	r3, [pc, #492]	; (8001c64 <HAL_RCC_OscConfig+0x4f4>)
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	4a7a      	ldr	r2, [pc, #488]	; (8001c64 <HAL_RCC_OscConfig+0x4f4>)
 8001a7a:	f043 0301 	orr.w	r3, r3, #1
 8001a7e:	6213      	str	r3, [r2, #32]
 8001a80:	e02d      	b.n	8001ade <HAL_RCC_OscConfig+0x36e>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10c      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x334>
 8001a8a:	4b76      	ldr	r3, [pc, #472]	; (8001c64 <HAL_RCC_OscConfig+0x4f4>)
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
 8001a8e:	4a75      	ldr	r2, [pc, #468]	; (8001c64 <HAL_RCC_OscConfig+0x4f4>)
 8001a90:	f023 0301 	bic.w	r3, r3, #1
 8001a94:	6213      	str	r3, [r2, #32]
 8001a96:	4b73      	ldr	r3, [pc, #460]	; (8001c64 <HAL_RCC_OscConfig+0x4f4>)
 8001a98:	6a1b      	ldr	r3, [r3, #32]
 8001a9a:	4a72      	ldr	r2, [pc, #456]	; (8001c64 <HAL_RCC_OscConfig+0x4f4>)
 8001a9c:	f023 0304 	bic.w	r3, r3, #4
 8001aa0:	6213      	str	r3, [r2, #32]
 8001aa2:	e01c      	b.n	8001ade <HAL_RCC_OscConfig+0x36e>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	2b05      	cmp	r3, #5
 8001aaa:	d10c      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x356>
 8001aac:	4b6d      	ldr	r3, [pc, #436]	; (8001c64 <HAL_RCC_OscConfig+0x4f4>)
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	4a6c      	ldr	r2, [pc, #432]	; (8001c64 <HAL_RCC_OscConfig+0x4f4>)
 8001ab2:	f043 0304 	orr.w	r3, r3, #4
 8001ab6:	6213      	str	r3, [r2, #32]
 8001ab8:	4b6a      	ldr	r3, [pc, #424]	; (8001c64 <HAL_RCC_OscConfig+0x4f4>)
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	4a69      	ldr	r2, [pc, #420]	; (8001c64 <HAL_RCC_OscConfig+0x4f4>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	6213      	str	r3, [r2, #32]
 8001ac4:	e00b      	b.n	8001ade <HAL_RCC_OscConfig+0x36e>
 8001ac6:	4b67      	ldr	r3, [pc, #412]	; (8001c64 <HAL_RCC_OscConfig+0x4f4>)
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	4a66      	ldr	r2, [pc, #408]	; (8001c64 <HAL_RCC_OscConfig+0x4f4>)
 8001acc:	f023 0301 	bic.w	r3, r3, #1
 8001ad0:	6213      	str	r3, [r2, #32]
 8001ad2:	4b64      	ldr	r3, [pc, #400]	; (8001c64 <HAL_RCC_OscConfig+0x4f4>)
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	4a63      	ldr	r2, [pc, #396]	; (8001c64 <HAL_RCC_OscConfig+0x4f4>)
 8001ad8:	f023 0304 	bic.w	r3, r3, #4
 8001adc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d015      	beq.n	8001b12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae6:	f7ff fb85 	bl	80011f4 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aec:	e00a      	b.n	8001b04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aee:	f7ff fb81 	bl	80011f4 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e0ab      	b.n	8001c5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b04:	4b57      	ldr	r3, [pc, #348]	; (8001c64 <HAL_RCC_OscConfig+0x4f4>)
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0ee      	beq.n	8001aee <HAL_RCC_OscConfig+0x37e>
 8001b10:	e014      	b.n	8001b3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b12:	f7ff fb6f 	bl	80011f4 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b18:	e00a      	b.n	8001b30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1a:	f7ff fb6b 	bl	80011f4 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e095      	b.n	8001c5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b30:	4b4c      	ldr	r3, [pc, #304]	; (8001c64 <HAL_RCC_OscConfig+0x4f4>)
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1ee      	bne.n	8001b1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b3c:	7dfb      	ldrb	r3, [r7, #23]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d105      	bne.n	8001b4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b42:	4b48      	ldr	r3, [pc, #288]	; (8001c64 <HAL_RCC_OscConfig+0x4f4>)
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	4a47      	ldr	r2, [pc, #284]	; (8001c64 <HAL_RCC_OscConfig+0x4f4>)
 8001b48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 8081 	beq.w	8001c5a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b58:	4b42      	ldr	r3, [pc, #264]	; (8001c64 <HAL_RCC_OscConfig+0x4f4>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 030c 	and.w	r3, r3, #12
 8001b60:	2b08      	cmp	r3, #8
 8001b62:	d061      	beq.n	8001c28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69db      	ldr	r3, [r3, #28]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d146      	bne.n	8001bfa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b6c:	4b3f      	ldr	r3, [pc, #252]	; (8001c6c <HAL_RCC_OscConfig+0x4fc>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b72:	f7ff fb3f 	bl	80011f4 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b7a:	f7ff fb3b 	bl	80011f4 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e067      	b.n	8001c5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b8c:	4b35      	ldr	r3, [pc, #212]	; (8001c64 <HAL_RCC_OscConfig+0x4f4>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1f0      	bne.n	8001b7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba0:	d108      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ba2:	4b30      	ldr	r3, [pc, #192]	; (8001c64 <HAL_RCC_OscConfig+0x4f4>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	492d      	ldr	r1, [pc, #180]	; (8001c64 <HAL_RCC_OscConfig+0x4f4>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bb4:	4b2b      	ldr	r3, [pc, #172]	; (8001c64 <HAL_RCC_OscConfig+0x4f4>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a19      	ldr	r1, [r3, #32]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	430b      	orrs	r3, r1
 8001bc6:	4927      	ldr	r1, [pc, #156]	; (8001c64 <HAL_RCC_OscConfig+0x4f4>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bcc:	4b27      	ldr	r3, [pc, #156]	; (8001c6c <HAL_RCC_OscConfig+0x4fc>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd2:	f7ff fb0f 	bl	80011f4 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bda:	f7ff fb0b 	bl	80011f4 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e037      	b.n	8001c5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bec:	4b1d      	ldr	r3, [pc, #116]	; (8001c64 <HAL_RCC_OscConfig+0x4f4>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0f0      	beq.n	8001bda <HAL_RCC_OscConfig+0x46a>
 8001bf8:	e02f      	b.n	8001c5a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfa:	4b1c      	ldr	r3, [pc, #112]	; (8001c6c <HAL_RCC_OscConfig+0x4fc>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c00:	f7ff faf8 	bl	80011f4 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c08:	f7ff faf4 	bl	80011f4 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e020      	b.n	8001c5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c1a:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <HAL_RCC_OscConfig+0x4f4>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f0      	bne.n	8001c08 <HAL_RCC_OscConfig+0x498>
 8001c26:	e018      	b.n	8001c5a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e013      	b.n	8001c5c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c34:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <HAL_RCC_OscConfig+0x4f4>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d106      	bne.n	8001c56 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d001      	beq.n	8001c5a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40007000 	.word	0x40007000
 8001c6c:	42420060 	.word	0x42420060

08001c70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0d0      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c84:	4b6a      	ldr	r3, [pc, #424]	; (8001e30 <HAL_RCC_ClockConfig+0x1c0>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d910      	bls.n	8001cb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c92:	4b67      	ldr	r3, [pc, #412]	; (8001e30 <HAL_RCC_ClockConfig+0x1c0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f023 0207 	bic.w	r2, r3, #7
 8001c9a:	4965      	ldr	r1, [pc, #404]	; (8001e30 <HAL_RCC_ClockConfig+0x1c0>)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca2:	4b63      	ldr	r3, [pc, #396]	; (8001e30 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d001      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e0b8      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d020      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ccc:	4b59      	ldr	r3, [pc, #356]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	4a58      	ldr	r2, [pc, #352]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cd6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0308 	and.w	r3, r3, #8
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ce4:	4b53      	ldr	r3, [pc, #332]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	4a52      	ldr	r2, [pc, #328]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001cea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf0:	4b50      	ldr	r3, [pc, #320]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	494d      	ldr	r1, [pc, #308]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d040      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d107      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d16:	4b47      	ldr	r3, [pc, #284]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d115      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e07f      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d107      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d2e:	4b41      	ldr	r3, [pc, #260]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d109      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e073      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d3e:	4b3d      	ldr	r3, [pc, #244]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e06b      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d4e:	4b39      	ldr	r3, [pc, #228]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f023 0203 	bic.w	r2, r3, #3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	4936      	ldr	r1, [pc, #216]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d60:	f7ff fa48 	bl	80011f4 <HAL_GetTick>
 8001d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d66:	e00a      	b.n	8001d7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d68:	f7ff fa44 	bl	80011f4 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e053      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7e:	4b2d      	ldr	r3, [pc, #180]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 020c 	and.w	r2, r3, #12
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d1eb      	bne.n	8001d68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d90:	4b27      	ldr	r3, [pc, #156]	; (8001e30 <HAL_RCC_ClockConfig+0x1c0>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d210      	bcs.n	8001dc0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9e:	4b24      	ldr	r3, [pc, #144]	; (8001e30 <HAL_RCC_ClockConfig+0x1c0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 0207 	bic.w	r2, r3, #7
 8001da6:	4922      	ldr	r1, [pc, #136]	; (8001e30 <HAL_RCC_ClockConfig+0x1c0>)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dae:	4b20      	ldr	r3, [pc, #128]	; (8001e30 <HAL_RCC_ClockConfig+0x1c0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e032      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d008      	beq.n	8001dde <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dcc:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	4916      	ldr	r1, [pc, #88]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d009      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dea:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	490e      	ldr	r1, [pc, #56]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dfe:	f000 f821 	bl	8001e44 <HAL_RCC_GetSysClockFreq>
 8001e02:	4602      	mov	r2, r0
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_RCC_ClockConfig+0x1c4>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	091b      	lsrs	r3, r3, #4
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	490a      	ldr	r1, [pc, #40]	; (8001e38 <HAL_RCC_ClockConfig+0x1c8>)
 8001e10:	5ccb      	ldrb	r3, [r1, r3]
 8001e12:	fa22 f303 	lsr.w	r3, r2, r3
 8001e16:	4a09      	ldr	r2, [pc, #36]	; (8001e3c <HAL_RCC_ClockConfig+0x1cc>)
 8001e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <HAL_RCC_ClockConfig+0x1d0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff f9a6 	bl	8001170 <HAL_InitTick>

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40022000 	.word	0x40022000
 8001e34:	40021000 	.word	0x40021000
 8001e38:	080036ac 	.word	0x080036ac
 8001e3c:	20000004 	.word	0x20000004
 8001e40:	20000008 	.word	0x20000008

08001e44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e44:	b490      	push	{r4, r7}
 8001e46:	b08a      	sub	sp, #40	; 0x28
 8001e48:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e4a:	4b2a      	ldr	r3, [pc, #168]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e4c:	1d3c      	adds	r4, r7, #4
 8001e4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e54:	f240 2301 	movw	r3, #513	; 0x201
 8001e58:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61bb      	str	r3, [r7, #24]
 8001e62:	2300      	movs	r3, #0
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e6e:	4b22      	ldr	r3, [pc, #136]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f003 030c 	and.w	r3, r3, #12
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	d002      	beq.n	8001e84 <HAL_RCC_GetSysClockFreq+0x40>
 8001e7e:	2b08      	cmp	r3, #8
 8001e80:	d003      	beq.n	8001e8a <HAL_RCC_GetSysClockFreq+0x46>
 8001e82:	e02d      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e84:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e86:	623b      	str	r3, [r7, #32]
      break;
 8001e88:	e02d      	b.n	8001ee6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	0c9b      	lsrs	r3, r3, #18
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e96:	4413      	add	r3, r2
 8001e98:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e9c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d013      	beq.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ea8:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	0c5b      	lsrs	r3, r3, #17
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ebc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	4a0e      	ldr	r2, [pc, #56]	; (8001efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ec2:	fb02 f203 	mul.w	r2, r2, r3
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ece:	e004      	b.n	8001eda <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	4a0b      	ldr	r2, [pc, #44]	; (8001f00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ed4:	fb02 f303 	mul.w	r3, r2, r3
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	623b      	str	r3, [r7, #32]
      break;
 8001ede:	e002      	b.n	8001ee6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ee2:	623b      	str	r3, [r7, #32]
      break;
 8001ee4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ee6:	6a3b      	ldr	r3, [r7, #32]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3728      	adds	r7, #40	; 0x28
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc90      	pop	{r4, r7}
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	08003438 	.word	0x08003438
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	007a1200 	.word	0x007a1200
 8001f00:	003d0900 	.word	0x003d0900

08001f04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f0c:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <RCC_Delay+0x34>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a0a      	ldr	r2, [pc, #40]	; (8001f3c <RCC_Delay+0x38>)
 8001f12:	fba2 2303 	umull	r2, r3, r2, r3
 8001f16:	0a5b      	lsrs	r3, r3, #9
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	fb02 f303 	mul.w	r3, r2, r3
 8001f1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f20:	bf00      	nop
  }
  while (Delay --);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	1e5a      	subs	r2, r3, #1
 8001f26:	60fa      	str	r2, [r7, #12]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1f9      	bne.n	8001f20 <RCC_Delay+0x1c>
}
 8001f2c:	bf00      	nop
 8001f2e:	bf00      	nop
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr
 8001f38:	20000004 	.word	0x20000004
 8001f3c:	10624dd3 	.word	0x10624dd3

08001f40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e076      	b.n	8002040 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d108      	bne.n	8001f6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f62:	d009      	beq.n	8001f78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	61da      	str	r2, [r3, #28]
 8001f6a:	e005      	b.n	8001f78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d106      	bne.n	8001f98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7fe ff9a 	bl	8000ecc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffc:	ea42 0103 	orr.w	r1, r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002004:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	430a      	orrs	r2, r1
 800200e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	0c1a      	lsrs	r2, r3, #16
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f002 0204 	and.w	r2, r2, #4
 800201e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	69da      	ldr	r2, [r3, #28]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800202e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b088      	sub	sp, #32
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	4613      	mov	r3, r2
 8002056:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002058:	2300      	movs	r3, #0
 800205a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002062:	2b01      	cmp	r3, #1
 8002064:	d101      	bne.n	800206a <HAL_SPI_Transmit+0x22>
 8002066:	2302      	movs	r3, #2
 8002068:	e126      	b.n	80022b8 <HAL_SPI_Transmit+0x270>
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002072:	f7ff f8bf 	bl	80011f4 <HAL_GetTick>
 8002076:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002078:	88fb      	ldrh	r3, [r7, #6]
 800207a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b01      	cmp	r3, #1
 8002086:	d002      	beq.n	800208e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002088:	2302      	movs	r3, #2
 800208a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800208c:	e10b      	b.n	80022a6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d002      	beq.n	800209a <HAL_SPI_Transmit+0x52>
 8002094:	88fb      	ldrh	r3, [r7, #6]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d102      	bne.n	80020a0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800209e:	e102      	b.n	80022a6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2203      	movs	r2, #3
 80020a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	88fa      	ldrh	r2, [r7, #6]
 80020b8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	88fa      	ldrh	r2, [r7, #6]
 80020be:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020e6:	d10f      	bne.n	8002108 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002106:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002112:	2b40      	cmp	r3, #64	; 0x40
 8002114:	d007      	beq.n	8002126 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002124:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800212e:	d14b      	bne.n	80021c8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d002      	beq.n	800213e <HAL_SPI_Transmit+0xf6>
 8002138:	8afb      	ldrh	r3, [r7, #22]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d13e      	bne.n	80021bc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	881a      	ldrh	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	1c9a      	adds	r2, r3, #2
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002158:	b29b      	uxth	r3, r3
 800215a:	3b01      	subs	r3, #1
 800215c:	b29a      	uxth	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002162:	e02b      	b.n	80021bc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b02      	cmp	r3, #2
 8002170:	d112      	bne.n	8002198 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	881a      	ldrh	r2, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	1c9a      	adds	r2, r3, #2
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800218c:	b29b      	uxth	r3, r3
 800218e:	3b01      	subs	r3, #1
 8002190:	b29a      	uxth	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	86da      	strh	r2, [r3, #54]	; 0x36
 8002196:	e011      	b.n	80021bc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002198:	f7ff f82c 	bl	80011f4 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d803      	bhi.n	80021b0 <HAL_SPI_Transmit+0x168>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ae:	d102      	bne.n	80021b6 <HAL_SPI_Transmit+0x16e>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d102      	bne.n	80021bc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80021ba:	e074      	b.n	80022a6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1ce      	bne.n	8002164 <HAL_SPI_Transmit+0x11c>
 80021c6:	e04c      	b.n	8002262 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d002      	beq.n	80021d6 <HAL_SPI_Transmit+0x18e>
 80021d0:	8afb      	ldrh	r3, [r7, #22]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d140      	bne.n	8002258 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	330c      	adds	r3, #12
 80021e0:	7812      	ldrb	r2, [r2, #0]
 80021e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	1c5a      	adds	r2, r3, #1
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	3b01      	subs	r3, #1
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80021fc:	e02c      	b.n	8002258 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b02      	cmp	r3, #2
 800220a:	d113      	bne.n	8002234 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	330c      	adds	r3, #12
 8002216:	7812      	ldrb	r2, [r2, #0]
 8002218:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	1c5a      	adds	r2, r3, #1
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002228:	b29b      	uxth	r3, r3
 800222a:	3b01      	subs	r3, #1
 800222c:	b29a      	uxth	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	86da      	strh	r2, [r3, #54]	; 0x36
 8002232:	e011      	b.n	8002258 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002234:	f7fe ffde 	bl	80011f4 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	429a      	cmp	r2, r3
 8002242:	d803      	bhi.n	800224c <HAL_SPI_Transmit+0x204>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224a:	d102      	bne.n	8002252 <HAL_SPI_Transmit+0x20a>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d102      	bne.n	8002258 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002256:	e026      	b.n	80022a6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800225c:	b29b      	uxth	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1cd      	bne.n	80021fe <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	6839      	ldr	r1, [r7, #0]
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 fbb8 	bl	80029dc <SPI_EndRxTxTransaction>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d002      	beq.n	8002278 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2220      	movs	r2, #32
 8002276:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10a      	bne.n	8002296 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002280:	2300      	movs	r3, #0
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229a:	2b00      	cmp	r3, #0
 800229c:	d002      	beq.n	80022a4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	77fb      	strb	r3, [r7, #31]
 80022a2:	e000      	b.n	80022a6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80022a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80022b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3720      	adds	r7, #32
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b088      	sub	sp, #32
 80022c4:	af02      	add	r7, sp, #8
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	603b      	str	r3, [r7, #0]
 80022cc:	4613      	mov	r3, r2
 80022ce:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80022d0:	2300      	movs	r3, #0
 80022d2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022dc:	d112      	bne.n	8002304 <HAL_SPI_Receive+0x44>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10e      	bne.n	8002304 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2204      	movs	r2, #4
 80022ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80022ee:	88fa      	ldrh	r2, [r7, #6]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	4613      	mov	r3, r2
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	68b9      	ldr	r1, [r7, #8]
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 f8f1 	bl	80024e2 <HAL_SPI_TransmitReceive>
 8002300:	4603      	mov	r3, r0
 8002302:	e0ea      	b.n	80024da <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800230a:	2b01      	cmp	r3, #1
 800230c:	d101      	bne.n	8002312 <HAL_SPI_Receive+0x52>
 800230e:	2302      	movs	r3, #2
 8002310:	e0e3      	b.n	80024da <HAL_SPI_Receive+0x21a>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800231a:	f7fe ff6b 	bl	80011f4 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b01      	cmp	r3, #1
 800232a:	d002      	beq.n	8002332 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800232c:	2302      	movs	r3, #2
 800232e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002330:	e0ca      	b.n	80024c8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <HAL_SPI_Receive+0x7e>
 8002338:	88fb      	ldrh	r3, [r7, #6]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d102      	bne.n	8002344 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002342:	e0c1      	b.n	80024c8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2204      	movs	r2, #4
 8002348:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	88fa      	ldrh	r2, [r7, #6]
 800235c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	88fa      	ldrh	r2, [r7, #6]
 8002362:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800238a:	d10f      	bne.n	80023ac <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800239a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80023aa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b6:	2b40      	cmp	r3, #64	; 0x40
 80023b8:	d007      	beq.n	80023ca <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023c8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d162      	bne.n	8002498 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80023d2:	e02e      	b.n	8002432 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d115      	bne.n	800240e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f103 020c 	add.w	r2, r3, #12
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ee:	7812      	ldrb	r2, [r2, #0]
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f8:	1c5a      	adds	r2, r3, #1
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002402:	b29b      	uxth	r3, r3
 8002404:	3b01      	subs	r3, #1
 8002406:	b29a      	uxth	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800240c:	e011      	b.n	8002432 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800240e:	f7fe fef1 	bl	80011f4 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	429a      	cmp	r2, r3
 800241c:	d803      	bhi.n	8002426 <HAL_SPI_Receive+0x166>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002424:	d102      	bne.n	800242c <HAL_SPI_Receive+0x16c>
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d102      	bne.n	8002432 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002430:	e04a      	b.n	80024c8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002436:	b29b      	uxth	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1cb      	bne.n	80023d4 <HAL_SPI_Receive+0x114>
 800243c:	e031      	b.n	80024a2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b01      	cmp	r3, #1
 800244a:	d113      	bne.n	8002474 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002456:	b292      	uxth	r2, r2
 8002458:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245e:	1c9a      	adds	r2, r3, #2
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002468:	b29b      	uxth	r3, r3
 800246a:	3b01      	subs	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002472:	e011      	b.n	8002498 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002474:	f7fe febe 	bl	80011f4 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d803      	bhi.n	800248c <HAL_SPI_Receive+0x1cc>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248a:	d102      	bne.n	8002492 <HAL_SPI_Receive+0x1d2>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d102      	bne.n	8002498 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002496:	e017      	b.n	80024c8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800249c:	b29b      	uxth	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1cd      	bne.n	800243e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	6839      	ldr	r1, [r7, #0]
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 fa46 	bl	8002938 <SPI_EndRxTransaction>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d002      	beq.n	80024b8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2220      	movs	r2, #32
 80024b6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	75fb      	strb	r3, [r7, #23]
 80024c4:	e000      	b.n	80024c8 <HAL_SPI_Receive+0x208>
  }

error :
 80024c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80024d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b08c      	sub	sp, #48	; 0x30
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	60f8      	str	r0, [r7, #12]
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	607a      	str	r2, [r7, #4]
 80024ee:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80024f0:	2301      	movs	r3, #1
 80024f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <HAL_SPI_TransmitReceive+0x26>
 8002504:	2302      	movs	r3, #2
 8002506:	e18a      	b.n	800281e <HAL_SPI_TransmitReceive+0x33c>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002510:	f7fe fe70 	bl	80011f4 <HAL_GetTick>
 8002514:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800251c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002526:	887b      	ldrh	r3, [r7, #2]
 8002528:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800252a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800252e:	2b01      	cmp	r3, #1
 8002530:	d00f      	beq.n	8002552 <HAL_SPI_TransmitReceive+0x70>
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002538:	d107      	bne.n	800254a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d103      	bne.n	800254a <HAL_SPI_TransmitReceive+0x68>
 8002542:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002546:	2b04      	cmp	r3, #4
 8002548:	d003      	beq.n	8002552 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800254a:	2302      	movs	r3, #2
 800254c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002550:	e15b      	b.n	800280a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <HAL_SPI_TransmitReceive+0x82>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d002      	beq.n	8002564 <HAL_SPI_TransmitReceive+0x82>
 800255e:	887b      	ldrh	r3, [r7, #2]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d103      	bne.n	800256c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800256a:	e14e      	b.n	800280a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b04      	cmp	r3, #4
 8002576:	d003      	beq.n	8002580 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2205      	movs	r2, #5
 800257c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	887a      	ldrh	r2, [r7, #2]
 8002590:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	887a      	ldrh	r2, [r7, #2]
 8002596:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	887a      	ldrh	r2, [r7, #2]
 80025a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	887a      	ldrh	r2, [r7, #2]
 80025a8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c0:	2b40      	cmp	r3, #64	; 0x40
 80025c2:	d007      	beq.n	80025d4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025dc:	d178      	bne.n	80026d0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d002      	beq.n	80025ec <HAL_SPI_TransmitReceive+0x10a>
 80025e6:	8b7b      	ldrh	r3, [r7, #26]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d166      	bne.n	80026ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f0:	881a      	ldrh	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	1c9a      	adds	r2, r3, #2
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002606:	b29b      	uxth	r3, r3
 8002608:	3b01      	subs	r3, #1
 800260a:	b29a      	uxth	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002610:	e053      	b.n	80026ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b02      	cmp	r3, #2
 800261e:	d11b      	bne.n	8002658 <HAL_SPI_TransmitReceive+0x176>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002624:	b29b      	uxth	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d016      	beq.n	8002658 <HAL_SPI_TransmitReceive+0x176>
 800262a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262c:	2b01      	cmp	r3, #1
 800262e:	d113      	bne.n	8002658 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002634:	881a      	ldrh	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002640:	1c9a      	adds	r2, r3, #2
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800264a:	b29b      	uxth	r3, r3
 800264c:	3b01      	subs	r3, #1
 800264e:	b29a      	uxth	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b01      	cmp	r3, #1
 8002664:	d119      	bne.n	800269a <HAL_SPI_TransmitReceive+0x1b8>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800266a:	b29b      	uxth	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d014      	beq.n	800269a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267a:	b292      	uxth	r2, r2
 800267c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002682:	1c9a      	adds	r2, r3, #2
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800268c:	b29b      	uxth	r3, r3
 800268e:	3b01      	subs	r3, #1
 8002690:	b29a      	uxth	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002696:	2301      	movs	r3, #1
 8002698:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800269a:	f7fe fdab 	bl	80011f4 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d807      	bhi.n	80026ba <HAL_SPI_TransmitReceive+0x1d8>
 80026aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b0:	d003      	beq.n	80026ba <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80026b8:	e0a7      	b.n	800280a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026be:	b29b      	uxth	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1a6      	bne.n	8002612 <HAL_SPI_TransmitReceive+0x130>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1a1      	bne.n	8002612 <HAL_SPI_TransmitReceive+0x130>
 80026ce:	e07c      	b.n	80027ca <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d002      	beq.n	80026de <HAL_SPI_TransmitReceive+0x1fc>
 80026d8:	8b7b      	ldrh	r3, [r7, #26]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d16b      	bne.n	80027b6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	330c      	adds	r3, #12
 80026e8:	7812      	ldrb	r2, [r2, #0]
 80026ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002704:	e057      	b.n	80027b6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b02      	cmp	r3, #2
 8002712:	d11c      	bne.n	800274e <HAL_SPI_TransmitReceive+0x26c>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002718:	b29b      	uxth	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d017      	beq.n	800274e <HAL_SPI_TransmitReceive+0x26c>
 800271e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002720:	2b01      	cmp	r3, #1
 8002722:	d114      	bne.n	800274e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	330c      	adds	r3, #12
 800272e:	7812      	ldrb	r2, [r2, #0]
 8002730:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002740:	b29b      	uxth	r3, r3
 8002742:	3b01      	subs	r3, #1
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800274a:	2300      	movs	r3, #0
 800274c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b01      	cmp	r3, #1
 800275a:	d119      	bne.n	8002790 <HAL_SPI_TransmitReceive+0x2ae>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002760:	b29b      	uxth	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d014      	beq.n	8002790 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002778:	1c5a      	adds	r2, r3, #1
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800278c:	2301      	movs	r3, #1
 800278e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002790:	f7fe fd30 	bl	80011f4 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800279c:	429a      	cmp	r2, r3
 800279e:	d803      	bhi.n	80027a8 <HAL_SPI_TransmitReceive+0x2c6>
 80027a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a6:	d102      	bne.n	80027ae <HAL_SPI_TransmitReceive+0x2cc>
 80027a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d103      	bne.n	80027b6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80027b4:	e029      	b.n	800280a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1a2      	bne.n	8002706 <HAL_SPI_TransmitReceive+0x224>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d19d      	bne.n	8002706 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f000 f904 	bl	80029dc <SPI_EndRxTxTransaction>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d006      	beq.n	80027e8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2220      	movs	r2, #32
 80027e4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80027e6:	e010      	b.n	800280a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10b      	bne.n	8002808 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027f0:	2300      	movs	r3, #0
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	e000      	b.n	800280a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002808:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800281a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800281e:	4618      	mov	r0, r3
 8002820:	3730      	adds	r7, #48	; 0x30
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
	...

08002828 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b088      	sub	sp, #32
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	603b      	str	r3, [r7, #0]
 8002834:	4613      	mov	r3, r2
 8002836:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002838:	f7fe fcdc 	bl	80011f4 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002840:	1a9b      	subs	r3, r3, r2
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	4413      	add	r3, r2
 8002846:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002848:	f7fe fcd4 	bl	80011f4 <HAL_GetTick>
 800284c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800284e:	4b39      	ldr	r3, [pc, #228]	; (8002934 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	015b      	lsls	r3, r3, #5
 8002854:	0d1b      	lsrs	r3, r3, #20
 8002856:	69fa      	ldr	r2, [r7, #28]
 8002858:	fb02 f303 	mul.w	r3, r2, r3
 800285c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800285e:	e054      	b.n	800290a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002866:	d050      	beq.n	800290a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002868:	f7fe fcc4 	bl	80011f4 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	69fa      	ldr	r2, [r7, #28]
 8002874:	429a      	cmp	r2, r3
 8002876:	d902      	bls.n	800287e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d13d      	bne.n	80028fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800288c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002896:	d111      	bne.n	80028bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028a0:	d004      	beq.n	80028ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028aa:	d107      	bne.n	80028bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028c4:	d10f      	bne.n	80028e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e017      	b.n	800292a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002900:	2300      	movs	r3, #0
 8002902:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	3b01      	subs	r3, #1
 8002908:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	4013      	ands	r3, r2
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	429a      	cmp	r2, r3
 8002918:	bf0c      	ite	eq
 800291a:	2301      	moveq	r3, #1
 800291c:	2300      	movne	r3, #0
 800291e:	b2db      	uxtb	r3, r3
 8002920:	461a      	mov	r2, r3
 8002922:	79fb      	ldrb	r3, [r7, #7]
 8002924:	429a      	cmp	r2, r3
 8002926:	d19b      	bne.n	8002860 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3720      	adds	r7, #32
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20000004 	.word	0x20000004

08002938 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af02      	add	r7, sp, #8
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800294c:	d111      	bne.n	8002972 <SPI_EndRxTransaction+0x3a>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002956:	d004      	beq.n	8002962 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002960:	d107      	bne.n	8002972 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002970:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800297a:	d117      	bne.n	80029ac <SPI_EndRxTransaction+0x74>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002984:	d112      	bne.n	80029ac <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2200      	movs	r2, #0
 800298e:	2101      	movs	r1, #1
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f7ff ff49 	bl	8002828 <SPI_WaitFlagStateUntilTimeout>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d01a      	beq.n	80029d2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a0:	f043 0220 	orr.w	r2, r3, #32
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e013      	b.n	80029d4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2200      	movs	r2, #0
 80029b4:	2180      	movs	r1, #128	; 0x80
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f7ff ff36 	bl	8002828 <SPI_WaitFlagStateUntilTimeout>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d007      	beq.n	80029d2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c6:	f043 0220 	orr.w	r2, r3, #32
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e000      	b.n	80029d4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2200      	movs	r2, #0
 80029f0:	2180      	movs	r1, #128	; 0x80
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f7ff ff18 	bl	8002828 <SPI_WaitFlagStateUntilTimeout>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d007      	beq.n	8002a0e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a02:	f043 0220 	orr.w	r2, r3, #32
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e000      	b.n	8002a10 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <__errno>:
 8002a18:	4b01      	ldr	r3, [pc, #4]	; (8002a20 <__errno+0x8>)
 8002a1a:	6818      	ldr	r0, [r3, #0]
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	20000010 	.word	0x20000010

08002a24 <__libc_init_array>:
 8002a24:	b570      	push	{r4, r5, r6, lr}
 8002a26:	2600      	movs	r6, #0
 8002a28:	4d0c      	ldr	r5, [pc, #48]	; (8002a5c <__libc_init_array+0x38>)
 8002a2a:	4c0d      	ldr	r4, [pc, #52]	; (8002a60 <__libc_init_array+0x3c>)
 8002a2c:	1b64      	subs	r4, r4, r5
 8002a2e:	10a4      	asrs	r4, r4, #2
 8002a30:	42a6      	cmp	r6, r4
 8002a32:	d109      	bne.n	8002a48 <__libc_init_array+0x24>
 8002a34:	f000 fce4 	bl	8003400 <_init>
 8002a38:	2600      	movs	r6, #0
 8002a3a:	4d0a      	ldr	r5, [pc, #40]	; (8002a64 <__libc_init_array+0x40>)
 8002a3c:	4c0a      	ldr	r4, [pc, #40]	; (8002a68 <__libc_init_array+0x44>)
 8002a3e:	1b64      	subs	r4, r4, r5
 8002a40:	10a4      	asrs	r4, r4, #2
 8002a42:	42a6      	cmp	r6, r4
 8002a44:	d105      	bne.n	8002a52 <__libc_init_array+0x2e>
 8002a46:	bd70      	pop	{r4, r5, r6, pc}
 8002a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a4c:	4798      	blx	r3
 8002a4e:	3601      	adds	r6, #1
 8002a50:	e7ee      	b.n	8002a30 <__libc_init_array+0xc>
 8002a52:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a56:	4798      	blx	r3
 8002a58:	3601      	adds	r6, #1
 8002a5a:	e7f2      	b.n	8002a42 <__libc_init_array+0x1e>
 8002a5c:	08003720 	.word	0x08003720
 8002a60:	08003720 	.word	0x08003720
 8002a64:	08003720 	.word	0x08003720
 8002a68:	08003724 	.word	0x08003724

08002a6c <memset>:
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	4402      	add	r2, r0
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d100      	bne.n	8002a76 <memset+0xa>
 8002a74:	4770      	bx	lr
 8002a76:	f803 1b01 	strb.w	r1, [r3], #1
 8002a7a:	e7f9      	b.n	8002a70 <memset+0x4>

08002a7c <_puts_r>:
 8002a7c:	b570      	push	{r4, r5, r6, lr}
 8002a7e:	460e      	mov	r6, r1
 8002a80:	4605      	mov	r5, r0
 8002a82:	b118      	cbz	r0, 8002a8c <_puts_r+0x10>
 8002a84:	6983      	ldr	r3, [r0, #24]
 8002a86:	b90b      	cbnz	r3, 8002a8c <_puts_r+0x10>
 8002a88:	f000 fa48 	bl	8002f1c <__sinit>
 8002a8c:	69ab      	ldr	r3, [r5, #24]
 8002a8e:	68ac      	ldr	r4, [r5, #8]
 8002a90:	b913      	cbnz	r3, 8002a98 <_puts_r+0x1c>
 8002a92:	4628      	mov	r0, r5
 8002a94:	f000 fa42 	bl	8002f1c <__sinit>
 8002a98:	4b2c      	ldr	r3, [pc, #176]	; (8002b4c <_puts_r+0xd0>)
 8002a9a:	429c      	cmp	r4, r3
 8002a9c:	d120      	bne.n	8002ae0 <_puts_r+0x64>
 8002a9e:	686c      	ldr	r4, [r5, #4]
 8002aa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002aa2:	07db      	lsls	r3, r3, #31
 8002aa4:	d405      	bmi.n	8002ab2 <_puts_r+0x36>
 8002aa6:	89a3      	ldrh	r3, [r4, #12]
 8002aa8:	0598      	lsls	r0, r3, #22
 8002aaa:	d402      	bmi.n	8002ab2 <_puts_r+0x36>
 8002aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002aae:	f000 fad3 	bl	8003058 <__retarget_lock_acquire_recursive>
 8002ab2:	89a3      	ldrh	r3, [r4, #12]
 8002ab4:	0719      	lsls	r1, r3, #28
 8002ab6:	d51d      	bpl.n	8002af4 <_puts_r+0x78>
 8002ab8:	6923      	ldr	r3, [r4, #16]
 8002aba:	b1db      	cbz	r3, 8002af4 <_puts_r+0x78>
 8002abc:	3e01      	subs	r6, #1
 8002abe:	68a3      	ldr	r3, [r4, #8]
 8002ac0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	60a3      	str	r3, [r4, #8]
 8002ac8:	bb39      	cbnz	r1, 8002b1a <_puts_r+0x9e>
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	da38      	bge.n	8002b40 <_puts_r+0xc4>
 8002ace:	4622      	mov	r2, r4
 8002ad0:	210a      	movs	r1, #10
 8002ad2:	4628      	mov	r0, r5
 8002ad4:	f000 f848 	bl	8002b68 <__swbuf_r>
 8002ad8:	3001      	adds	r0, #1
 8002ada:	d011      	beq.n	8002b00 <_puts_r+0x84>
 8002adc:	250a      	movs	r5, #10
 8002ade:	e011      	b.n	8002b04 <_puts_r+0x88>
 8002ae0:	4b1b      	ldr	r3, [pc, #108]	; (8002b50 <_puts_r+0xd4>)
 8002ae2:	429c      	cmp	r4, r3
 8002ae4:	d101      	bne.n	8002aea <_puts_r+0x6e>
 8002ae6:	68ac      	ldr	r4, [r5, #8]
 8002ae8:	e7da      	b.n	8002aa0 <_puts_r+0x24>
 8002aea:	4b1a      	ldr	r3, [pc, #104]	; (8002b54 <_puts_r+0xd8>)
 8002aec:	429c      	cmp	r4, r3
 8002aee:	bf08      	it	eq
 8002af0:	68ec      	ldreq	r4, [r5, #12]
 8002af2:	e7d5      	b.n	8002aa0 <_puts_r+0x24>
 8002af4:	4621      	mov	r1, r4
 8002af6:	4628      	mov	r0, r5
 8002af8:	f000 f888 	bl	8002c0c <__swsetup_r>
 8002afc:	2800      	cmp	r0, #0
 8002afe:	d0dd      	beq.n	8002abc <_puts_r+0x40>
 8002b00:	f04f 35ff 	mov.w	r5, #4294967295
 8002b04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b06:	07da      	lsls	r2, r3, #31
 8002b08:	d405      	bmi.n	8002b16 <_puts_r+0x9a>
 8002b0a:	89a3      	ldrh	r3, [r4, #12]
 8002b0c:	059b      	lsls	r3, r3, #22
 8002b0e:	d402      	bmi.n	8002b16 <_puts_r+0x9a>
 8002b10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b12:	f000 faa2 	bl	800305a <__retarget_lock_release_recursive>
 8002b16:	4628      	mov	r0, r5
 8002b18:	bd70      	pop	{r4, r5, r6, pc}
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	da04      	bge.n	8002b28 <_puts_r+0xac>
 8002b1e:	69a2      	ldr	r2, [r4, #24]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	dc06      	bgt.n	8002b32 <_puts_r+0xb6>
 8002b24:	290a      	cmp	r1, #10
 8002b26:	d004      	beq.n	8002b32 <_puts_r+0xb6>
 8002b28:	6823      	ldr	r3, [r4, #0]
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	6022      	str	r2, [r4, #0]
 8002b2e:	7019      	strb	r1, [r3, #0]
 8002b30:	e7c5      	b.n	8002abe <_puts_r+0x42>
 8002b32:	4622      	mov	r2, r4
 8002b34:	4628      	mov	r0, r5
 8002b36:	f000 f817 	bl	8002b68 <__swbuf_r>
 8002b3a:	3001      	adds	r0, #1
 8002b3c:	d1bf      	bne.n	8002abe <_puts_r+0x42>
 8002b3e:	e7df      	b.n	8002b00 <_puts_r+0x84>
 8002b40:	250a      	movs	r5, #10
 8002b42:	6823      	ldr	r3, [r4, #0]
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	6022      	str	r2, [r4, #0]
 8002b48:	701d      	strb	r5, [r3, #0]
 8002b4a:	e7db      	b.n	8002b04 <_puts_r+0x88>
 8002b4c:	080036e0 	.word	0x080036e0
 8002b50:	08003700 	.word	0x08003700
 8002b54:	080036c0 	.word	0x080036c0

08002b58 <puts>:
 8002b58:	4b02      	ldr	r3, [pc, #8]	; (8002b64 <puts+0xc>)
 8002b5a:	4601      	mov	r1, r0
 8002b5c:	6818      	ldr	r0, [r3, #0]
 8002b5e:	f7ff bf8d 	b.w	8002a7c <_puts_r>
 8002b62:	bf00      	nop
 8002b64:	20000010 	.word	0x20000010

08002b68 <__swbuf_r>:
 8002b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b6a:	460e      	mov	r6, r1
 8002b6c:	4614      	mov	r4, r2
 8002b6e:	4605      	mov	r5, r0
 8002b70:	b118      	cbz	r0, 8002b7a <__swbuf_r+0x12>
 8002b72:	6983      	ldr	r3, [r0, #24]
 8002b74:	b90b      	cbnz	r3, 8002b7a <__swbuf_r+0x12>
 8002b76:	f000 f9d1 	bl	8002f1c <__sinit>
 8002b7a:	4b21      	ldr	r3, [pc, #132]	; (8002c00 <__swbuf_r+0x98>)
 8002b7c:	429c      	cmp	r4, r3
 8002b7e:	d12b      	bne.n	8002bd8 <__swbuf_r+0x70>
 8002b80:	686c      	ldr	r4, [r5, #4]
 8002b82:	69a3      	ldr	r3, [r4, #24]
 8002b84:	60a3      	str	r3, [r4, #8]
 8002b86:	89a3      	ldrh	r3, [r4, #12]
 8002b88:	071a      	lsls	r2, r3, #28
 8002b8a:	d52f      	bpl.n	8002bec <__swbuf_r+0x84>
 8002b8c:	6923      	ldr	r3, [r4, #16]
 8002b8e:	b36b      	cbz	r3, 8002bec <__swbuf_r+0x84>
 8002b90:	6923      	ldr	r3, [r4, #16]
 8002b92:	6820      	ldr	r0, [r4, #0]
 8002b94:	b2f6      	uxtb	r6, r6
 8002b96:	1ac0      	subs	r0, r0, r3
 8002b98:	6963      	ldr	r3, [r4, #20]
 8002b9a:	4637      	mov	r7, r6
 8002b9c:	4283      	cmp	r3, r0
 8002b9e:	dc04      	bgt.n	8002baa <__swbuf_r+0x42>
 8002ba0:	4621      	mov	r1, r4
 8002ba2:	4628      	mov	r0, r5
 8002ba4:	f000 f926 	bl	8002df4 <_fflush_r>
 8002ba8:	bb30      	cbnz	r0, 8002bf8 <__swbuf_r+0x90>
 8002baa:	68a3      	ldr	r3, [r4, #8]
 8002bac:	3001      	adds	r0, #1
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	60a3      	str	r3, [r4, #8]
 8002bb2:	6823      	ldr	r3, [r4, #0]
 8002bb4:	1c5a      	adds	r2, r3, #1
 8002bb6:	6022      	str	r2, [r4, #0]
 8002bb8:	701e      	strb	r6, [r3, #0]
 8002bba:	6963      	ldr	r3, [r4, #20]
 8002bbc:	4283      	cmp	r3, r0
 8002bbe:	d004      	beq.n	8002bca <__swbuf_r+0x62>
 8002bc0:	89a3      	ldrh	r3, [r4, #12]
 8002bc2:	07db      	lsls	r3, r3, #31
 8002bc4:	d506      	bpl.n	8002bd4 <__swbuf_r+0x6c>
 8002bc6:	2e0a      	cmp	r6, #10
 8002bc8:	d104      	bne.n	8002bd4 <__swbuf_r+0x6c>
 8002bca:	4621      	mov	r1, r4
 8002bcc:	4628      	mov	r0, r5
 8002bce:	f000 f911 	bl	8002df4 <_fflush_r>
 8002bd2:	b988      	cbnz	r0, 8002bf8 <__swbuf_r+0x90>
 8002bd4:	4638      	mov	r0, r7
 8002bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bd8:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <__swbuf_r+0x9c>)
 8002bda:	429c      	cmp	r4, r3
 8002bdc:	d101      	bne.n	8002be2 <__swbuf_r+0x7a>
 8002bde:	68ac      	ldr	r4, [r5, #8]
 8002be0:	e7cf      	b.n	8002b82 <__swbuf_r+0x1a>
 8002be2:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <__swbuf_r+0xa0>)
 8002be4:	429c      	cmp	r4, r3
 8002be6:	bf08      	it	eq
 8002be8:	68ec      	ldreq	r4, [r5, #12]
 8002bea:	e7ca      	b.n	8002b82 <__swbuf_r+0x1a>
 8002bec:	4621      	mov	r1, r4
 8002bee:	4628      	mov	r0, r5
 8002bf0:	f000 f80c 	bl	8002c0c <__swsetup_r>
 8002bf4:	2800      	cmp	r0, #0
 8002bf6:	d0cb      	beq.n	8002b90 <__swbuf_r+0x28>
 8002bf8:	f04f 37ff 	mov.w	r7, #4294967295
 8002bfc:	e7ea      	b.n	8002bd4 <__swbuf_r+0x6c>
 8002bfe:	bf00      	nop
 8002c00:	080036e0 	.word	0x080036e0
 8002c04:	08003700 	.word	0x08003700
 8002c08:	080036c0 	.word	0x080036c0

08002c0c <__swsetup_r>:
 8002c0c:	4b32      	ldr	r3, [pc, #200]	; (8002cd8 <__swsetup_r+0xcc>)
 8002c0e:	b570      	push	{r4, r5, r6, lr}
 8002c10:	681d      	ldr	r5, [r3, #0]
 8002c12:	4606      	mov	r6, r0
 8002c14:	460c      	mov	r4, r1
 8002c16:	b125      	cbz	r5, 8002c22 <__swsetup_r+0x16>
 8002c18:	69ab      	ldr	r3, [r5, #24]
 8002c1a:	b913      	cbnz	r3, 8002c22 <__swsetup_r+0x16>
 8002c1c:	4628      	mov	r0, r5
 8002c1e:	f000 f97d 	bl	8002f1c <__sinit>
 8002c22:	4b2e      	ldr	r3, [pc, #184]	; (8002cdc <__swsetup_r+0xd0>)
 8002c24:	429c      	cmp	r4, r3
 8002c26:	d10f      	bne.n	8002c48 <__swsetup_r+0x3c>
 8002c28:	686c      	ldr	r4, [r5, #4]
 8002c2a:	89a3      	ldrh	r3, [r4, #12]
 8002c2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002c30:	0719      	lsls	r1, r3, #28
 8002c32:	d42c      	bmi.n	8002c8e <__swsetup_r+0x82>
 8002c34:	06dd      	lsls	r5, r3, #27
 8002c36:	d411      	bmi.n	8002c5c <__swsetup_r+0x50>
 8002c38:	2309      	movs	r3, #9
 8002c3a:	6033      	str	r3, [r6, #0]
 8002c3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002c40:	f04f 30ff 	mov.w	r0, #4294967295
 8002c44:	81a3      	strh	r3, [r4, #12]
 8002c46:	e03e      	b.n	8002cc6 <__swsetup_r+0xba>
 8002c48:	4b25      	ldr	r3, [pc, #148]	; (8002ce0 <__swsetup_r+0xd4>)
 8002c4a:	429c      	cmp	r4, r3
 8002c4c:	d101      	bne.n	8002c52 <__swsetup_r+0x46>
 8002c4e:	68ac      	ldr	r4, [r5, #8]
 8002c50:	e7eb      	b.n	8002c2a <__swsetup_r+0x1e>
 8002c52:	4b24      	ldr	r3, [pc, #144]	; (8002ce4 <__swsetup_r+0xd8>)
 8002c54:	429c      	cmp	r4, r3
 8002c56:	bf08      	it	eq
 8002c58:	68ec      	ldreq	r4, [r5, #12]
 8002c5a:	e7e6      	b.n	8002c2a <__swsetup_r+0x1e>
 8002c5c:	0758      	lsls	r0, r3, #29
 8002c5e:	d512      	bpl.n	8002c86 <__swsetup_r+0x7a>
 8002c60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c62:	b141      	cbz	r1, 8002c76 <__swsetup_r+0x6a>
 8002c64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c68:	4299      	cmp	r1, r3
 8002c6a:	d002      	beq.n	8002c72 <__swsetup_r+0x66>
 8002c6c:	4630      	mov	r0, r6
 8002c6e:	f000 fa59 	bl	8003124 <_free_r>
 8002c72:	2300      	movs	r3, #0
 8002c74:	6363      	str	r3, [r4, #52]	; 0x34
 8002c76:	89a3      	ldrh	r3, [r4, #12]
 8002c78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002c7c:	81a3      	strh	r3, [r4, #12]
 8002c7e:	2300      	movs	r3, #0
 8002c80:	6063      	str	r3, [r4, #4]
 8002c82:	6923      	ldr	r3, [r4, #16]
 8002c84:	6023      	str	r3, [r4, #0]
 8002c86:	89a3      	ldrh	r3, [r4, #12]
 8002c88:	f043 0308 	orr.w	r3, r3, #8
 8002c8c:	81a3      	strh	r3, [r4, #12]
 8002c8e:	6923      	ldr	r3, [r4, #16]
 8002c90:	b94b      	cbnz	r3, 8002ca6 <__swsetup_r+0x9a>
 8002c92:	89a3      	ldrh	r3, [r4, #12]
 8002c94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c9c:	d003      	beq.n	8002ca6 <__swsetup_r+0x9a>
 8002c9e:	4621      	mov	r1, r4
 8002ca0:	4630      	mov	r0, r6
 8002ca2:	f000 f9ff 	bl	80030a4 <__smakebuf_r>
 8002ca6:	89a0      	ldrh	r0, [r4, #12]
 8002ca8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002cac:	f010 0301 	ands.w	r3, r0, #1
 8002cb0:	d00a      	beq.n	8002cc8 <__swsetup_r+0xbc>
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60a3      	str	r3, [r4, #8]
 8002cb6:	6963      	ldr	r3, [r4, #20]
 8002cb8:	425b      	negs	r3, r3
 8002cba:	61a3      	str	r3, [r4, #24]
 8002cbc:	6923      	ldr	r3, [r4, #16]
 8002cbe:	b943      	cbnz	r3, 8002cd2 <__swsetup_r+0xc6>
 8002cc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002cc4:	d1ba      	bne.n	8002c3c <__swsetup_r+0x30>
 8002cc6:	bd70      	pop	{r4, r5, r6, pc}
 8002cc8:	0781      	lsls	r1, r0, #30
 8002cca:	bf58      	it	pl
 8002ccc:	6963      	ldrpl	r3, [r4, #20]
 8002cce:	60a3      	str	r3, [r4, #8]
 8002cd0:	e7f4      	b.n	8002cbc <__swsetup_r+0xb0>
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	e7f7      	b.n	8002cc6 <__swsetup_r+0xba>
 8002cd6:	bf00      	nop
 8002cd8:	20000010 	.word	0x20000010
 8002cdc:	080036e0 	.word	0x080036e0
 8002ce0:	08003700 	.word	0x08003700
 8002ce4:	080036c0 	.word	0x080036c0

08002ce8 <__sflush_r>:
 8002ce8:	898a      	ldrh	r2, [r1, #12]
 8002cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cee:	4605      	mov	r5, r0
 8002cf0:	0710      	lsls	r0, r2, #28
 8002cf2:	460c      	mov	r4, r1
 8002cf4:	d458      	bmi.n	8002da8 <__sflush_r+0xc0>
 8002cf6:	684b      	ldr	r3, [r1, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	dc05      	bgt.n	8002d08 <__sflush_r+0x20>
 8002cfc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	dc02      	bgt.n	8002d08 <__sflush_r+0x20>
 8002d02:	2000      	movs	r0, #0
 8002d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d0a:	2e00      	cmp	r6, #0
 8002d0c:	d0f9      	beq.n	8002d02 <__sflush_r+0x1a>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002d14:	682f      	ldr	r7, [r5, #0]
 8002d16:	602b      	str	r3, [r5, #0]
 8002d18:	d032      	beq.n	8002d80 <__sflush_r+0x98>
 8002d1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002d1c:	89a3      	ldrh	r3, [r4, #12]
 8002d1e:	075a      	lsls	r2, r3, #29
 8002d20:	d505      	bpl.n	8002d2e <__sflush_r+0x46>
 8002d22:	6863      	ldr	r3, [r4, #4]
 8002d24:	1ac0      	subs	r0, r0, r3
 8002d26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d28:	b10b      	cbz	r3, 8002d2e <__sflush_r+0x46>
 8002d2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d2c:	1ac0      	subs	r0, r0, r3
 8002d2e:	2300      	movs	r3, #0
 8002d30:	4602      	mov	r2, r0
 8002d32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d34:	4628      	mov	r0, r5
 8002d36:	6a21      	ldr	r1, [r4, #32]
 8002d38:	47b0      	blx	r6
 8002d3a:	1c43      	adds	r3, r0, #1
 8002d3c:	89a3      	ldrh	r3, [r4, #12]
 8002d3e:	d106      	bne.n	8002d4e <__sflush_r+0x66>
 8002d40:	6829      	ldr	r1, [r5, #0]
 8002d42:	291d      	cmp	r1, #29
 8002d44:	d82c      	bhi.n	8002da0 <__sflush_r+0xb8>
 8002d46:	4a2a      	ldr	r2, [pc, #168]	; (8002df0 <__sflush_r+0x108>)
 8002d48:	40ca      	lsrs	r2, r1
 8002d4a:	07d6      	lsls	r6, r2, #31
 8002d4c:	d528      	bpl.n	8002da0 <__sflush_r+0xb8>
 8002d4e:	2200      	movs	r2, #0
 8002d50:	6062      	str	r2, [r4, #4]
 8002d52:	6922      	ldr	r2, [r4, #16]
 8002d54:	04d9      	lsls	r1, r3, #19
 8002d56:	6022      	str	r2, [r4, #0]
 8002d58:	d504      	bpl.n	8002d64 <__sflush_r+0x7c>
 8002d5a:	1c42      	adds	r2, r0, #1
 8002d5c:	d101      	bne.n	8002d62 <__sflush_r+0x7a>
 8002d5e:	682b      	ldr	r3, [r5, #0]
 8002d60:	b903      	cbnz	r3, 8002d64 <__sflush_r+0x7c>
 8002d62:	6560      	str	r0, [r4, #84]	; 0x54
 8002d64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d66:	602f      	str	r7, [r5, #0]
 8002d68:	2900      	cmp	r1, #0
 8002d6a:	d0ca      	beq.n	8002d02 <__sflush_r+0x1a>
 8002d6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d70:	4299      	cmp	r1, r3
 8002d72:	d002      	beq.n	8002d7a <__sflush_r+0x92>
 8002d74:	4628      	mov	r0, r5
 8002d76:	f000 f9d5 	bl	8003124 <_free_r>
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	6360      	str	r0, [r4, #52]	; 0x34
 8002d7e:	e7c1      	b.n	8002d04 <__sflush_r+0x1c>
 8002d80:	6a21      	ldr	r1, [r4, #32]
 8002d82:	2301      	movs	r3, #1
 8002d84:	4628      	mov	r0, r5
 8002d86:	47b0      	blx	r6
 8002d88:	1c41      	adds	r1, r0, #1
 8002d8a:	d1c7      	bne.n	8002d1c <__sflush_r+0x34>
 8002d8c:	682b      	ldr	r3, [r5, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0c4      	beq.n	8002d1c <__sflush_r+0x34>
 8002d92:	2b1d      	cmp	r3, #29
 8002d94:	d001      	beq.n	8002d9a <__sflush_r+0xb2>
 8002d96:	2b16      	cmp	r3, #22
 8002d98:	d101      	bne.n	8002d9e <__sflush_r+0xb6>
 8002d9a:	602f      	str	r7, [r5, #0]
 8002d9c:	e7b1      	b.n	8002d02 <__sflush_r+0x1a>
 8002d9e:	89a3      	ldrh	r3, [r4, #12]
 8002da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002da4:	81a3      	strh	r3, [r4, #12]
 8002da6:	e7ad      	b.n	8002d04 <__sflush_r+0x1c>
 8002da8:	690f      	ldr	r7, [r1, #16]
 8002daa:	2f00      	cmp	r7, #0
 8002dac:	d0a9      	beq.n	8002d02 <__sflush_r+0x1a>
 8002dae:	0793      	lsls	r3, r2, #30
 8002db0:	bf18      	it	ne
 8002db2:	2300      	movne	r3, #0
 8002db4:	680e      	ldr	r6, [r1, #0]
 8002db6:	bf08      	it	eq
 8002db8:	694b      	ldreq	r3, [r1, #20]
 8002dba:	eba6 0807 	sub.w	r8, r6, r7
 8002dbe:	600f      	str	r7, [r1, #0]
 8002dc0:	608b      	str	r3, [r1, #8]
 8002dc2:	f1b8 0f00 	cmp.w	r8, #0
 8002dc6:	dd9c      	ble.n	8002d02 <__sflush_r+0x1a>
 8002dc8:	4643      	mov	r3, r8
 8002dca:	463a      	mov	r2, r7
 8002dcc:	4628      	mov	r0, r5
 8002dce:	6a21      	ldr	r1, [r4, #32]
 8002dd0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002dd2:	47b0      	blx	r6
 8002dd4:	2800      	cmp	r0, #0
 8002dd6:	dc06      	bgt.n	8002de6 <__sflush_r+0xfe>
 8002dd8:	89a3      	ldrh	r3, [r4, #12]
 8002dda:	f04f 30ff 	mov.w	r0, #4294967295
 8002dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002de2:	81a3      	strh	r3, [r4, #12]
 8002de4:	e78e      	b.n	8002d04 <__sflush_r+0x1c>
 8002de6:	4407      	add	r7, r0
 8002de8:	eba8 0800 	sub.w	r8, r8, r0
 8002dec:	e7e9      	b.n	8002dc2 <__sflush_r+0xda>
 8002dee:	bf00      	nop
 8002df0:	20400001 	.word	0x20400001

08002df4 <_fflush_r>:
 8002df4:	b538      	push	{r3, r4, r5, lr}
 8002df6:	690b      	ldr	r3, [r1, #16]
 8002df8:	4605      	mov	r5, r0
 8002dfa:	460c      	mov	r4, r1
 8002dfc:	b913      	cbnz	r3, 8002e04 <_fflush_r+0x10>
 8002dfe:	2500      	movs	r5, #0
 8002e00:	4628      	mov	r0, r5
 8002e02:	bd38      	pop	{r3, r4, r5, pc}
 8002e04:	b118      	cbz	r0, 8002e0e <_fflush_r+0x1a>
 8002e06:	6983      	ldr	r3, [r0, #24]
 8002e08:	b90b      	cbnz	r3, 8002e0e <_fflush_r+0x1a>
 8002e0a:	f000 f887 	bl	8002f1c <__sinit>
 8002e0e:	4b14      	ldr	r3, [pc, #80]	; (8002e60 <_fflush_r+0x6c>)
 8002e10:	429c      	cmp	r4, r3
 8002e12:	d11b      	bne.n	8002e4c <_fflush_r+0x58>
 8002e14:	686c      	ldr	r4, [r5, #4]
 8002e16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d0ef      	beq.n	8002dfe <_fflush_r+0xa>
 8002e1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002e20:	07d0      	lsls	r0, r2, #31
 8002e22:	d404      	bmi.n	8002e2e <_fflush_r+0x3a>
 8002e24:	0599      	lsls	r1, r3, #22
 8002e26:	d402      	bmi.n	8002e2e <_fflush_r+0x3a>
 8002e28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e2a:	f000 f915 	bl	8003058 <__retarget_lock_acquire_recursive>
 8002e2e:	4628      	mov	r0, r5
 8002e30:	4621      	mov	r1, r4
 8002e32:	f7ff ff59 	bl	8002ce8 <__sflush_r>
 8002e36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e38:	4605      	mov	r5, r0
 8002e3a:	07da      	lsls	r2, r3, #31
 8002e3c:	d4e0      	bmi.n	8002e00 <_fflush_r+0xc>
 8002e3e:	89a3      	ldrh	r3, [r4, #12]
 8002e40:	059b      	lsls	r3, r3, #22
 8002e42:	d4dd      	bmi.n	8002e00 <_fflush_r+0xc>
 8002e44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e46:	f000 f908 	bl	800305a <__retarget_lock_release_recursive>
 8002e4a:	e7d9      	b.n	8002e00 <_fflush_r+0xc>
 8002e4c:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <_fflush_r+0x70>)
 8002e4e:	429c      	cmp	r4, r3
 8002e50:	d101      	bne.n	8002e56 <_fflush_r+0x62>
 8002e52:	68ac      	ldr	r4, [r5, #8]
 8002e54:	e7df      	b.n	8002e16 <_fflush_r+0x22>
 8002e56:	4b04      	ldr	r3, [pc, #16]	; (8002e68 <_fflush_r+0x74>)
 8002e58:	429c      	cmp	r4, r3
 8002e5a:	bf08      	it	eq
 8002e5c:	68ec      	ldreq	r4, [r5, #12]
 8002e5e:	e7da      	b.n	8002e16 <_fflush_r+0x22>
 8002e60:	080036e0 	.word	0x080036e0
 8002e64:	08003700 	.word	0x08003700
 8002e68:	080036c0 	.word	0x080036c0

08002e6c <std>:
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	b510      	push	{r4, lr}
 8002e70:	4604      	mov	r4, r0
 8002e72:	e9c0 3300 	strd	r3, r3, [r0]
 8002e76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002e7a:	6083      	str	r3, [r0, #8]
 8002e7c:	8181      	strh	r1, [r0, #12]
 8002e7e:	6643      	str	r3, [r0, #100]	; 0x64
 8002e80:	81c2      	strh	r2, [r0, #14]
 8002e82:	6183      	str	r3, [r0, #24]
 8002e84:	4619      	mov	r1, r3
 8002e86:	2208      	movs	r2, #8
 8002e88:	305c      	adds	r0, #92	; 0x5c
 8002e8a:	f7ff fdef 	bl	8002a6c <memset>
 8002e8e:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <std+0x38>)
 8002e90:	6224      	str	r4, [r4, #32]
 8002e92:	6263      	str	r3, [r4, #36]	; 0x24
 8002e94:	4b04      	ldr	r3, [pc, #16]	; (8002ea8 <std+0x3c>)
 8002e96:	62a3      	str	r3, [r4, #40]	; 0x28
 8002e98:	4b04      	ldr	r3, [pc, #16]	; (8002eac <std+0x40>)
 8002e9a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002e9c:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <std+0x44>)
 8002e9e:	6323      	str	r3, [r4, #48]	; 0x30
 8002ea0:	bd10      	pop	{r4, pc}
 8002ea2:	bf00      	nop
 8002ea4:	08003291 	.word	0x08003291
 8002ea8:	080032b3 	.word	0x080032b3
 8002eac:	080032eb 	.word	0x080032eb
 8002eb0:	0800330f 	.word	0x0800330f

08002eb4 <_cleanup_r>:
 8002eb4:	4901      	ldr	r1, [pc, #4]	; (8002ebc <_cleanup_r+0x8>)
 8002eb6:	f000 b8af 	b.w	8003018 <_fwalk_reent>
 8002eba:	bf00      	nop
 8002ebc:	08002df5 	.word	0x08002df5

08002ec0 <__sfmoreglue>:
 8002ec0:	b570      	push	{r4, r5, r6, lr}
 8002ec2:	2568      	movs	r5, #104	; 0x68
 8002ec4:	1e4a      	subs	r2, r1, #1
 8002ec6:	4355      	muls	r5, r2
 8002ec8:	460e      	mov	r6, r1
 8002eca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002ece:	f000 f975 	bl	80031bc <_malloc_r>
 8002ed2:	4604      	mov	r4, r0
 8002ed4:	b140      	cbz	r0, 8002ee8 <__sfmoreglue+0x28>
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	e9c0 1600 	strd	r1, r6, [r0]
 8002edc:	300c      	adds	r0, #12
 8002ede:	60a0      	str	r0, [r4, #8]
 8002ee0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002ee4:	f7ff fdc2 	bl	8002a6c <memset>
 8002ee8:	4620      	mov	r0, r4
 8002eea:	bd70      	pop	{r4, r5, r6, pc}

08002eec <__sfp_lock_acquire>:
 8002eec:	4801      	ldr	r0, [pc, #4]	; (8002ef4 <__sfp_lock_acquire+0x8>)
 8002eee:	f000 b8b3 	b.w	8003058 <__retarget_lock_acquire_recursive>
 8002ef2:	bf00      	nop
 8002ef4:	20000564 	.word	0x20000564

08002ef8 <__sfp_lock_release>:
 8002ef8:	4801      	ldr	r0, [pc, #4]	; (8002f00 <__sfp_lock_release+0x8>)
 8002efa:	f000 b8ae 	b.w	800305a <__retarget_lock_release_recursive>
 8002efe:	bf00      	nop
 8002f00:	20000564 	.word	0x20000564

08002f04 <__sinit_lock_acquire>:
 8002f04:	4801      	ldr	r0, [pc, #4]	; (8002f0c <__sinit_lock_acquire+0x8>)
 8002f06:	f000 b8a7 	b.w	8003058 <__retarget_lock_acquire_recursive>
 8002f0a:	bf00      	nop
 8002f0c:	2000055f 	.word	0x2000055f

08002f10 <__sinit_lock_release>:
 8002f10:	4801      	ldr	r0, [pc, #4]	; (8002f18 <__sinit_lock_release+0x8>)
 8002f12:	f000 b8a2 	b.w	800305a <__retarget_lock_release_recursive>
 8002f16:	bf00      	nop
 8002f18:	2000055f 	.word	0x2000055f

08002f1c <__sinit>:
 8002f1c:	b510      	push	{r4, lr}
 8002f1e:	4604      	mov	r4, r0
 8002f20:	f7ff fff0 	bl	8002f04 <__sinit_lock_acquire>
 8002f24:	69a3      	ldr	r3, [r4, #24]
 8002f26:	b11b      	cbz	r3, 8002f30 <__sinit+0x14>
 8002f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f2c:	f7ff bff0 	b.w	8002f10 <__sinit_lock_release>
 8002f30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002f34:	6523      	str	r3, [r4, #80]	; 0x50
 8002f36:	4b13      	ldr	r3, [pc, #76]	; (8002f84 <__sinit+0x68>)
 8002f38:	4a13      	ldr	r2, [pc, #76]	; (8002f88 <__sinit+0x6c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8002f3e:	42a3      	cmp	r3, r4
 8002f40:	bf08      	it	eq
 8002f42:	2301      	moveq	r3, #1
 8002f44:	4620      	mov	r0, r4
 8002f46:	bf08      	it	eq
 8002f48:	61a3      	streq	r3, [r4, #24]
 8002f4a:	f000 f81f 	bl	8002f8c <__sfp>
 8002f4e:	6060      	str	r0, [r4, #4]
 8002f50:	4620      	mov	r0, r4
 8002f52:	f000 f81b 	bl	8002f8c <__sfp>
 8002f56:	60a0      	str	r0, [r4, #8]
 8002f58:	4620      	mov	r0, r4
 8002f5a:	f000 f817 	bl	8002f8c <__sfp>
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2104      	movs	r1, #4
 8002f62:	60e0      	str	r0, [r4, #12]
 8002f64:	6860      	ldr	r0, [r4, #4]
 8002f66:	f7ff ff81 	bl	8002e6c <std>
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	2109      	movs	r1, #9
 8002f6e:	68a0      	ldr	r0, [r4, #8]
 8002f70:	f7ff ff7c 	bl	8002e6c <std>
 8002f74:	2202      	movs	r2, #2
 8002f76:	2112      	movs	r1, #18
 8002f78:	68e0      	ldr	r0, [r4, #12]
 8002f7a:	f7ff ff77 	bl	8002e6c <std>
 8002f7e:	2301      	movs	r3, #1
 8002f80:	61a3      	str	r3, [r4, #24]
 8002f82:	e7d1      	b.n	8002f28 <__sinit+0xc>
 8002f84:	080036bc 	.word	0x080036bc
 8002f88:	08002eb5 	.word	0x08002eb5

08002f8c <__sfp>:
 8002f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f8e:	4607      	mov	r7, r0
 8002f90:	f7ff ffac 	bl	8002eec <__sfp_lock_acquire>
 8002f94:	4b1e      	ldr	r3, [pc, #120]	; (8003010 <__sfp+0x84>)
 8002f96:	681e      	ldr	r6, [r3, #0]
 8002f98:	69b3      	ldr	r3, [r6, #24]
 8002f9a:	b913      	cbnz	r3, 8002fa2 <__sfp+0x16>
 8002f9c:	4630      	mov	r0, r6
 8002f9e:	f7ff ffbd 	bl	8002f1c <__sinit>
 8002fa2:	3648      	adds	r6, #72	; 0x48
 8002fa4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	d503      	bpl.n	8002fb4 <__sfp+0x28>
 8002fac:	6833      	ldr	r3, [r6, #0]
 8002fae:	b30b      	cbz	r3, 8002ff4 <__sfp+0x68>
 8002fb0:	6836      	ldr	r6, [r6, #0]
 8002fb2:	e7f7      	b.n	8002fa4 <__sfp+0x18>
 8002fb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002fb8:	b9d5      	cbnz	r5, 8002ff0 <__sfp+0x64>
 8002fba:	4b16      	ldr	r3, [pc, #88]	; (8003014 <__sfp+0x88>)
 8002fbc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002fc0:	60e3      	str	r3, [r4, #12]
 8002fc2:	6665      	str	r5, [r4, #100]	; 0x64
 8002fc4:	f000 f847 	bl	8003056 <__retarget_lock_init_recursive>
 8002fc8:	f7ff ff96 	bl	8002ef8 <__sfp_lock_release>
 8002fcc:	2208      	movs	r2, #8
 8002fce:	4629      	mov	r1, r5
 8002fd0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002fd4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002fd8:	6025      	str	r5, [r4, #0]
 8002fda:	61a5      	str	r5, [r4, #24]
 8002fdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002fe0:	f7ff fd44 	bl	8002a6c <memset>
 8002fe4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002fe8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002fec:	4620      	mov	r0, r4
 8002fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ff0:	3468      	adds	r4, #104	; 0x68
 8002ff2:	e7d9      	b.n	8002fa8 <__sfp+0x1c>
 8002ff4:	2104      	movs	r1, #4
 8002ff6:	4638      	mov	r0, r7
 8002ff8:	f7ff ff62 	bl	8002ec0 <__sfmoreglue>
 8002ffc:	4604      	mov	r4, r0
 8002ffe:	6030      	str	r0, [r6, #0]
 8003000:	2800      	cmp	r0, #0
 8003002:	d1d5      	bne.n	8002fb0 <__sfp+0x24>
 8003004:	f7ff ff78 	bl	8002ef8 <__sfp_lock_release>
 8003008:	230c      	movs	r3, #12
 800300a:	603b      	str	r3, [r7, #0]
 800300c:	e7ee      	b.n	8002fec <__sfp+0x60>
 800300e:	bf00      	nop
 8003010:	080036bc 	.word	0x080036bc
 8003014:	ffff0001 	.word	0xffff0001

08003018 <_fwalk_reent>:
 8003018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800301c:	4606      	mov	r6, r0
 800301e:	4688      	mov	r8, r1
 8003020:	2700      	movs	r7, #0
 8003022:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003026:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800302a:	f1b9 0901 	subs.w	r9, r9, #1
 800302e:	d505      	bpl.n	800303c <_fwalk_reent+0x24>
 8003030:	6824      	ldr	r4, [r4, #0]
 8003032:	2c00      	cmp	r4, #0
 8003034:	d1f7      	bne.n	8003026 <_fwalk_reent+0xe>
 8003036:	4638      	mov	r0, r7
 8003038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800303c:	89ab      	ldrh	r3, [r5, #12]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d907      	bls.n	8003052 <_fwalk_reent+0x3a>
 8003042:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003046:	3301      	adds	r3, #1
 8003048:	d003      	beq.n	8003052 <_fwalk_reent+0x3a>
 800304a:	4629      	mov	r1, r5
 800304c:	4630      	mov	r0, r6
 800304e:	47c0      	blx	r8
 8003050:	4307      	orrs	r7, r0
 8003052:	3568      	adds	r5, #104	; 0x68
 8003054:	e7e9      	b.n	800302a <_fwalk_reent+0x12>

08003056 <__retarget_lock_init_recursive>:
 8003056:	4770      	bx	lr

08003058 <__retarget_lock_acquire_recursive>:
 8003058:	4770      	bx	lr

0800305a <__retarget_lock_release_recursive>:
 800305a:	4770      	bx	lr

0800305c <__swhatbuf_r>:
 800305c:	b570      	push	{r4, r5, r6, lr}
 800305e:	460e      	mov	r6, r1
 8003060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003064:	4614      	mov	r4, r2
 8003066:	2900      	cmp	r1, #0
 8003068:	461d      	mov	r5, r3
 800306a:	b096      	sub	sp, #88	; 0x58
 800306c:	da07      	bge.n	800307e <__swhatbuf_r+0x22>
 800306e:	2300      	movs	r3, #0
 8003070:	602b      	str	r3, [r5, #0]
 8003072:	89b3      	ldrh	r3, [r6, #12]
 8003074:	061a      	lsls	r2, r3, #24
 8003076:	d410      	bmi.n	800309a <__swhatbuf_r+0x3e>
 8003078:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800307c:	e00e      	b.n	800309c <__swhatbuf_r+0x40>
 800307e:	466a      	mov	r2, sp
 8003080:	f000 f96c 	bl	800335c <_fstat_r>
 8003084:	2800      	cmp	r0, #0
 8003086:	dbf2      	blt.n	800306e <__swhatbuf_r+0x12>
 8003088:	9a01      	ldr	r2, [sp, #4]
 800308a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800308e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003092:	425a      	negs	r2, r3
 8003094:	415a      	adcs	r2, r3
 8003096:	602a      	str	r2, [r5, #0]
 8003098:	e7ee      	b.n	8003078 <__swhatbuf_r+0x1c>
 800309a:	2340      	movs	r3, #64	; 0x40
 800309c:	2000      	movs	r0, #0
 800309e:	6023      	str	r3, [r4, #0]
 80030a0:	b016      	add	sp, #88	; 0x58
 80030a2:	bd70      	pop	{r4, r5, r6, pc}

080030a4 <__smakebuf_r>:
 80030a4:	898b      	ldrh	r3, [r1, #12]
 80030a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80030a8:	079d      	lsls	r5, r3, #30
 80030aa:	4606      	mov	r6, r0
 80030ac:	460c      	mov	r4, r1
 80030ae:	d507      	bpl.n	80030c0 <__smakebuf_r+0x1c>
 80030b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80030b4:	6023      	str	r3, [r4, #0]
 80030b6:	6123      	str	r3, [r4, #16]
 80030b8:	2301      	movs	r3, #1
 80030ba:	6163      	str	r3, [r4, #20]
 80030bc:	b002      	add	sp, #8
 80030be:	bd70      	pop	{r4, r5, r6, pc}
 80030c0:	466a      	mov	r2, sp
 80030c2:	ab01      	add	r3, sp, #4
 80030c4:	f7ff ffca 	bl	800305c <__swhatbuf_r>
 80030c8:	9900      	ldr	r1, [sp, #0]
 80030ca:	4605      	mov	r5, r0
 80030cc:	4630      	mov	r0, r6
 80030ce:	f000 f875 	bl	80031bc <_malloc_r>
 80030d2:	b948      	cbnz	r0, 80030e8 <__smakebuf_r+0x44>
 80030d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030d8:	059a      	lsls	r2, r3, #22
 80030da:	d4ef      	bmi.n	80030bc <__smakebuf_r+0x18>
 80030dc:	f023 0303 	bic.w	r3, r3, #3
 80030e0:	f043 0302 	orr.w	r3, r3, #2
 80030e4:	81a3      	strh	r3, [r4, #12]
 80030e6:	e7e3      	b.n	80030b0 <__smakebuf_r+0xc>
 80030e8:	4b0d      	ldr	r3, [pc, #52]	; (8003120 <__smakebuf_r+0x7c>)
 80030ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80030ec:	89a3      	ldrh	r3, [r4, #12]
 80030ee:	6020      	str	r0, [r4, #0]
 80030f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030f4:	81a3      	strh	r3, [r4, #12]
 80030f6:	9b00      	ldr	r3, [sp, #0]
 80030f8:	6120      	str	r0, [r4, #16]
 80030fa:	6163      	str	r3, [r4, #20]
 80030fc:	9b01      	ldr	r3, [sp, #4]
 80030fe:	b15b      	cbz	r3, 8003118 <__smakebuf_r+0x74>
 8003100:	4630      	mov	r0, r6
 8003102:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003106:	f000 f93b 	bl	8003380 <_isatty_r>
 800310a:	b128      	cbz	r0, 8003118 <__smakebuf_r+0x74>
 800310c:	89a3      	ldrh	r3, [r4, #12]
 800310e:	f023 0303 	bic.w	r3, r3, #3
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	81a3      	strh	r3, [r4, #12]
 8003118:	89a0      	ldrh	r0, [r4, #12]
 800311a:	4305      	orrs	r5, r0
 800311c:	81a5      	strh	r5, [r4, #12]
 800311e:	e7cd      	b.n	80030bc <__smakebuf_r+0x18>
 8003120:	08002eb5 	.word	0x08002eb5

08003124 <_free_r>:
 8003124:	b538      	push	{r3, r4, r5, lr}
 8003126:	4605      	mov	r5, r0
 8003128:	2900      	cmp	r1, #0
 800312a:	d043      	beq.n	80031b4 <_free_r+0x90>
 800312c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003130:	1f0c      	subs	r4, r1, #4
 8003132:	2b00      	cmp	r3, #0
 8003134:	bfb8      	it	lt
 8003136:	18e4      	addlt	r4, r4, r3
 8003138:	f000 f944 	bl	80033c4 <__malloc_lock>
 800313c:	4a1e      	ldr	r2, [pc, #120]	; (80031b8 <_free_r+0x94>)
 800313e:	6813      	ldr	r3, [r2, #0]
 8003140:	4610      	mov	r0, r2
 8003142:	b933      	cbnz	r3, 8003152 <_free_r+0x2e>
 8003144:	6063      	str	r3, [r4, #4]
 8003146:	6014      	str	r4, [r2, #0]
 8003148:	4628      	mov	r0, r5
 800314a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800314e:	f000 b93f 	b.w	80033d0 <__malloc_unlock>
 8003152:	42a3      	cmp	r3, r4
 8003154:	d90a      	bls.n	800316c <_free_r+0x48>
 8003156:	6821      	ldr	r1, [r4, #0]
 8003158:	1862      	adds	r2, r4, r1
 800315a:	4293      	cmp	r3, r2
 800315c:	bf01      	itttt	eq
 800315e:	681a      	ldreq	r2, [r3, #0]
 8003160:	685b      	ldreq	r3, [r3, #4]
 8003162:	1852      	addeq	r2, r2, r1
 8003164:	6022      	streq	r2, [r4, #0]
 8003166:	6063      	str	r3, [r4, #4]
 8003168:	6004      	str	r4, [r0, #0]
 800316a:	e7ed      	b.n	8003148 <_free_r+0x24>
 800316c:	461a      	mov	r2, r3
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	b10b      	cbz	r3, 8003176 <_free_r+0x52>
 8003172:	42a3      	cmp	r3, r4
 8003174:	d9fa      	bls.n	800316c <_free_r+0x48>
 8003176:	6811      	ldr	r1, [r2, #0]
 8003178:	1850      	adds	r0, r2, r1
 800317a:	42a0      	cmp	r0, r4
 800317c:	d10b      	bne.n	8003196 <_free_r+0x72>
 800317e:	6820      	ldr	r0, [r4, #0]
 8003180:	4401      	add	r1, r0
 8003182:	1850      	adds	r0, r2, r1
 8003184:	4283      	cmp	r3, r0
 8003186:	6011      	str	r1, [r2, #0]
 8003188:	d1de      	bne.n	8003148 <_free_r+0x24>
 800318a:	6818      	ldr	r0, [r3, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	4401      	add	r1, r0
 8003190:	6011      	str	r1, [r2, #0]
 8003192:	6053      	str	r3, [r2, #4]
 8003194:	e7d8      	b.n	8003148 <_free_r+0x24>
 8003196:	d902      	bls.n	800319e <_free_r+0x7a>
 8003198:	230c      	movs	r3, #12
 800319a:	602b      	str	r3, [r5, #0]
 800319c:	e7d4      	b.n	8003148 <_free_r+0x24>
 800319e:	6820      	ldr	r0, [r4, #0]
 80031a0:	1821      	adds	r1, r4, r0
 80031a2:	428b      	cmp	r3, r1
 80031a4:	bf01      	itttt	eq
 80031a6:	6819      	ldreq	r1, [r3, #0]
 80031a8:	685b      	ldreq	r3, [r3, #4]
 80031aa:	1809      	addeq	r1, r1, r0
 80031ac:	6021      	streq	r1, [r4, #0]
 80031ae:	6063      	str	r3, [r4, #4]
 80031b0:	6054      	str	r4, [r2, #4]
 80031b2:	e7c9      	b.n	8003148 <_free_r+0x24>
 80031b4:	bd38      	pop	{r3, r4, r5, pc}
 80031b6:	bf00      	nop
 80031b8:	20000434 	.word	0x20000434

080031bc <_malloc_r>:
 80031bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031be:	1ccd      	adds	r5, r1, #3
 80031c0:	f025 0503 	bic.w	r5, r5, #3
 80031c4:	3508      	adds	r5, #8
 80031c6:	2d0c      	cmp	r5, #12
 80031c8:	bf38      	it	cc
 80031ca:	250c      	movcc	r5, #12
 80031cc:	2d00      	cmp	r5, #0
 80031ce:	4606      	mov	r6, r0
 80031d0:	db01      	blt.n	80031d6 <_malloc_r+0x1a>
 80031d2:	42a9      	cmp	r1, r5
 80031d4:	d903      	bls.n	80031de <_malloc_r+0x22>
 80031d6:	230c      	movs	r3, #12
 80031d8:	6033      	str	r3, [r6, #0]
 80031da:	2000      	movs	r0, #0
 80031dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031de:	f000 f8f1 	bl	80033c4 <__malloc_lock>
 80031e2:	4921      	ldr	r1, [pc, #132]	; (8003268 <_malloc_r+0xac>)
 80031e4:	680a      	ldr	r2, [r1, #0]
 80031e6:	4614      	mov	r4, r2
 80031e8:	b99c      	cbnz	r4, 8003212 <_malloc_r+0x56>
 80031ea:	4f20      	ldr	r7, [pc, #128]	; (800326c <_malloc_r+0xb0>)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	b923      	cbnz	r3, 80031fa <_malloc_r+0x3e>
 80031f0:	4621      	mov	r1, r4
 80031f2:	4630      	mov	r0, r6
 80031f4:	f000 f83c 	bl	8003270 <_sbrk_r>
 80031f8:	6038      	str	r0, [r7, #0]
 80031fa:	4629      	mov	r1, r5
 80031fc:	4630      	mov	r0, r6
 80031fe:	f000 f837 	bl	8003270 <_sbrk_r>
 8003202:	1c43      	adds	r3, r0, #1
 8003204:	d123      	bne.n	800324e <_malloc_r+0x92>
 8003206:	230c      	movs	r3, #12
 8003208:	4630      	mov	r0, r6
 800320a:	6033      	str	r3, [r6, #0]
 800320c:	f000 f8e0 	bl	80033d0 <__malloc_unlock>
 8003210:	e7e3      	b.n	80031da <_malloc_r+0x1e>
 8003212:	6823      	ldr	r3, [r4, #0]
 8003214:	1b5b      	subs	r3, r3, r5
 8003216:	d417      	bmi.n	8003248 <_malloc_r+0x8c>
 8003218:	2b0b      	cmp	r3, #11
 800321a:	d903      	bls.n	8003224 <_malloc_r+0x68>
 800321c:	6023      	str	r3, [r4, #0]
 800321e:	441c      	add	r4, r3
 8003220:	6025      	str	r5, [r4, #0]
 8003222:	e004      	b.n	800322e <_malloc_r+0x72>
 8003224:	6863      	ldr	r3, [r4, #4]
 8003226:	42a2      	cmp	r2, r4
 8003228:	bf0c      	ite	eq
 800322a:	600b      	streq	r3, [r1, #0]
 800322c:	6053      	strne	r3, [r2, #4]
 800322e:	4630      	mov	r0, r6
 8003230:	f000 f8ce 	bl	80033d0 <__malloc_unlock>
 8003234:	f104 000b 	add.w	r0, r4, #11
 8003238:	1d23      	adds	r3, r4, #4
 800323a:	f020 0007 	bic.w	r0, r0, #7
 800323e:	1ac2      	subs	r2, r0, r3
 8003240:	d0cc      	beq.n	80031dc <_malloc_r+0x20>
 8003242:	1a1b      	subs	r3, r3, r0
 8003244:	50a3      	str	r3, [r4, r2]
 8003246:	e7c9      	b.n	80031dc <_malloc_r+0x20>
 8003248:	4622      	mov	r2, r4
 800324a:	6864      	ldr	r4, [r4, #4]
 800324c:	e7cc      	b.n	80031e8 <_malloc_r+0x2c>
 800324e:	1cc4      	adds	r4, r0, #3
 8003250:	f024 0403 	bic.w	r4, r4, #3
 8003254:	42a0      	cmp	r0, r4
 8003256:	d0e3      	beq.n	8003220 <_malloc_r+0x64>
 8003258:	1a21      	subs	r1, r4, r0
 800325a:	4630      	mov	r0, r6
 800325c:	f000 f808 	bl	8003270 <_sbrk_r>
 8003260:	3001      	adds	r0, #1
 8003262:	d1dd      	bne.n	8003220 <_malloc_r+0x64>
 8003264:	e7cf      	b.n	8003206 <_malloc_r+0x4a>
 8003266:	bf00      	nop
 8003268:	20000434 	.word	0x20000434
 800326c:	20000438 	.word	0x20000438

08003270 <_sbrk_r>:
 8003270:	b538      	push	{r3, r4, r5, lr}
 8003272:	2300      	movs	r3, #0
 8003274:	4d05      	ldr	r5, [pc, #20]	; (800328c <_sbrk_r+0x1c>)
 8003276:	4604      	mov	r4, r0
 8003278:	4608      	mov	r0, r1
 800327a:	602b      	str	r3, [r5, #0]
 800327c:	f7fd ff00 	bl	8001080 <_sbrk>
 8003280:	1c43      	adds	r3, r0, #1
 8003282:	d102      	bne.n	800328a <_sbrk_r+0x1a>
 8003284:	682b      	ldr	r3, [r5, #0]
 8003286:	b103      	cbz	r3, 800328a <_sbrk_r+0x1a>
 8003288:	6023      	str	r3, [r4, #0]
 800328a:	bd38      	pop	{r3, r4, r5, pc}
 800328c:	20000568 	.word	0x20000568

08003290 <__sread>:
 8003290:	b510      	push	{r4, lr}
 8003292:	460c      	mov	r4, r1
 8003294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003298:	f000 f8a0 	bl	80033dc <_read_r>
 800329c:	2800      	cmp	r0, #0
 800329e:	bfab      	itete	ge
 80032a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80032a2:	89a3      	ldrhlt	r3, [r4, #12]
 80032a4:	181b      	addge	r3, r3, r0
 80032a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80032aa:	bfac      	ite	ge
 80032ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80032ae:	81a3      	strhlt	r3, [r4, #12]
 80032b0:	bd10      	pop	{r4, pc}

080032b2 <__swrite>:
 80032b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032b6:	461f      	mov	r7, r3
 80032b8:	898b      	ldrh	r3, [r1, #12]
 80032ba:	4605      	mov	r5, r0
 80032bc:	05db      	lsls	r3, r3, #23
 80032be:	460c      	mov	r4, r1
 80032c0:	4616      	mov	r6, r2
 80032c2:	d505      	bpl.n	80032d0 <__swrite+0x1e>
 80032c4:	2302      	movs	r3, #2
 80032c6:	2200      	movs	r2, #0
 80032c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032cc:	f000 f868 	bl	80033a0 <_lseek_r>
 80032d0:	89a3      	ldrh	r3, [r4, #12]
 80032d2:	4632      	mov	r2, r6
 80032d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032d8:	81a3      	strh	r3, [r4, #12]
 80032da:	4628      	mov	r0, r5
 80032dc:	463b      	mov	r3, r7
 80032de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032e6:	f000 b817 	b.w	8003318 <_write_r>

080032ea <__sseek>:
 80032ea:	b510      	push	{r4, lr}
 80032ec:	460c      	mov	r4, r1
 80032ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032f2:	f000 f855 	bl	80033a0 <_lseek_r>
 80032f6:	1c43      	adds	r3, r0, #1
 80032f8:	89a3      	ldrh	r3, [r4, #12]
 80032fa:	bf15      	itete	ne
 80032fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80032fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003302:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003306:	81a3      	strheq	r3, [r4, #12]
 8003308:	bf18      	it	ne
 800330a:	81a3      	strhne	r3, [r4, #12]
 800330c:	bd10      	pop	{r4, pc}

0800330e <__sclose>:
 800330e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003312:	f000 b813 	b.w	800333c <_close_r>
	...

08003318 <_write_r>:
 8003318:	b538      	push	{r3, r4, r5, lr}
 800331a:	4604      	mov	r4, r0
 800331c:	4608      	mov	r0, r1
 800331e:	4611      	mov	r1, r2
 8003320:	2200      	movs	r2, #0
 8003322:	4d05      	ldr	r5, [pc, #20]	; (8003338 <_write_r+0x20>)
 8003324:	602a      	str	r2, [r5, #0]
 8003326:	461a      	mov	r2, r3
 8003328:	f7fd fe5e 	bl	8000fe8 <_write>
 800332c:	1c43      	adds	r3, r0, #1
 800332e:	d102      	bne.n	8003336 <_write_r+0x1e>
 8003330:	682b      	ldr	r3, [r5, #0]
 8003332:	b103      	cbz	r3, 8003336 <_write_r+0x1e>
 8003334:	6023      	str	r3, [r4, #0]
 8003336:	bd38      	pop	{r3, r4, r5, pc}
 8003338:	20000568 	.word	0x20000568

0800333c <_close_r>:
 800333c:	b538      	push	{r3, r4, r5, lr}
 800333e:	2300      	movs	r3, #0
 8003340:	4d05      	ldr	r5, [pc, #20]	; (8003358 <_close_r+0x1c>)
 8003342:	4604      	mov	r4, r0
 8003344:	4608      	mov	r0, r1
 8003346:	602b      	str	r3, [r5, #0]
 8003348:	f7fd fe6a 	bl	8001020 <_close>
 800334c:	1c43      	adds	r3, r0, #1
 800334e:	d102      	bne.n	8003356 <_close_r+0x1a>
 8003350:	682b      	ldr	r3, [r5, #0]
 8003352:	b103      	cbz	r3, 8003356 <_close_r+0x1a>
 8003354:	6023      	str	r3, [r4, #0]
 8003356:	bd38      	pop	{r3, r4, r5, pc}
 8003358:	20000568 	.word	0x20000568

0800335c <_fstat_r>:
 800335c:	b538      	push	{r3, r4, r5, lr}
 800335e:	2300      	movs	r3, #0
 8003360:	4d06      	ldr	r5, [pc, #24]	; (800337c <_fstat_r+0x20>)
 8003362:	4604      	mov	r4, r0
 8003364:	4608      	mov	r0, r1
 8003366:	4611      	mov	r1, r2
 8003368:	602b      	str	r3, [r5, #0]
 800336a:	f7fd fe64 	bl	8001036 <_fstat>
 800336e:	1c43      	adds	r3, r0, #1
 8003370:	d102      	bne.n	8003378 <_fstat_r+0x1c>
 8003372:	682b      	ldr	r3, [r5, #0]
 8003374:	b103      	cbz	r3, 8003378 <_fstat_r+0x1c>
 8003376:	6023      	str	r3, [r4, #0]
 8003378:	bd38      	pop	{r3, r4, r5, pc}
 800337a:	bf00      	nop
 800337c:	20000568 	.word	0x20000568

08003380 <_isatty_r>:
 8003380:	b538      	push	{r3, r4, r5, lr}
 8003382:	2300      	movs	r3, #0
 8003384:	4d05      	ldr	r5, [pc, #20]	; (800339c <_isatty_r+0x1c>)
 8003386:	4604      	mov	r4, r0
 8003388:	4608      	mov	r0, r1
 800338a:	602b      	str	r3, [r5, #0]
 800338c:	f7fd fe62 	bl	8001054 <_isatty>
 8003390:	1c43      	adds	r3, r0, #1
 8003392:	d102      	bne.n	800339a <_isatty_r+0x1a>
 8003394:	682b      	ldr	r3, [r5, #0]
 8003396:	b103      	cbz	r3, 800339a <_isatty_r+0x1a>
 8003398:	6023      	str	r3, [r4, #0]
 800339a:	bd38      	pop	{r3, r4, r5, pc}
 800339c:	20000568 	.word	0x20000568

080033a0 <_lseek_r>:
 80033a0:	b538      	push	{r3, r4, r5, lr}
 80033a2:	4604      	mov	r4, r0
 80033a4:	4608      	mov	r0, r1
 80033a6:	4611      	mov	r1, r2
 80033a8:	2200      	movs	r2, #0
 80033aa:	4d05      	ldr	r5, [pc, #20]	; (80033c0 <_lseek_r+0x20>)
 80033ac:	602a      	str	r2, [r5, #0]
 80033ae:	461a      	mov	r2, r3
 80033b0:	f7fd fe5a 	bl	8001068 <_lseek>
 80033b4:	1c43      	adds	r3, r0, #1
 80033b6:	d102      	bne.n	80033be <_lseek_r+0x1e>
 80033b8:	682b      	ldr	r3, [r5, #0]
 80033ba:	b103      	cbz	r3, 80033be <_lseek_r+0x1e>
 80033bc:	6023      	str	r3, [r4, #0]
 80033be:	bd38      	pop	{r3, r4, r5, pc}
 80033c0:	20000568 	.word	0x20000568

080033c4 <__malloc_lock>:
 80033c4:	4801      	ldr	r0, [pc, #4]	; (80033cc <__malloc_lock+0x8>)
 80033c6:	f7ff be47 	b.w	8003058 <__retarget_lock_acquire_recursive>
 80033ca:	bf00      	nop
 80033cc:	20000560 	.word	0x20000560

080033d0 <__malloc_unlock>:
 80033d0:	4801      	ldr	r0, [pc, #4]	; (80033d8 <__malloc_unlock+0x8>)
 80033d2:	f7ff be42 	b.w	800305a <__retarget_lock_release_recursive>
 80033d6:	bf00      	nop
 80033d8:	20000560 	.word	0x20000560

080033dc <_read_r>:
 80033dc:	b538      	push	{r3, r4, r5, lr}
 80033de:	4604      	mov	r4, r0
 80033e0:	4608      	mov	r0, r1
 80033e2:	4611      	mov	r1, r2
 80033e4:	2200      	movs	r2, #0
 80033e6:	4d05      	ldr	r5, [pc, #20]	; (80033fc <_read_r+0x20>)
 80033e8:	602a      	str	r2, [r5, #0]
 80033ea:	461a      	mov	r2, r3
 80033ec:	f7fd fddf 	bl	8000fae <_read>
 80033f0:	1c43      	adds	r3, r0, #1
 80033f2:	d102      	bne.n	80033fa <_read_r+0x1e>
 80033f4:	682b      	ldr	r3, [r5, #0]
 80033f6:	b103      	cbz	r3, 80033fa <_read_r+0x1e>
 80033f8:	6023      	str	r3, [r4, #0]
 80033fa:	bd38      	pop	{r3, r4, r5, pc}
 80033fc:	20000568 	.word	0x20000568

08003400 <_init>:
 8003400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003402:	bf00      	nop
 8003404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003406:	bc08      	pop	{r3}
 8003408:	469e      	mov	lr, r3
 800340a:	4770      	bx	lr

0800340c <_fini>:
 800340c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800340e:	bf00      	nop
 8003410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003412:	bc08      	pop	{r3}
 8003414:	469e      	mov	lr, r3
 8003416:	4770      	bx	lr
